{
  "openapi": "3.0.0",
  "info": {
    "title": "api.wordnik.com",
    "version": "4.0",
    "x-jentic-source-url": "https://developer.wordnik.com/api-docs/swagger.json"
  },
  "servers": [
    {
      "url": "https://api.wordnik.com/v4"
    }
  ],
  "paths": {
    "/word.json/{word}/audio": {
      "get": {
        "parameters": [
          {
            "description": "Word to get audio for.",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
            "in": "query",
            "name": "useCanonical",
            "required": false,
            "schema": {
              "default": "false",
              "enum": [
                "false",
                "true"
              ],
              "type": "string"
            }
          },
          {
            "description": "Maximum number of results to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 50,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AudioFile"
                  },
                  "type": "array"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "tags": [
          "word"
        ],
        "description": "The metadata includes a time-expiring fileUrl which allows reading the audio file directly from the API.  Currently only audio pronunciations from the American Heritage Dictionary in mp3 format are supported.",
        "operationId": "getAudio",
        "summary": "Fetches audio metadata for a word."
      }
    },
    "/word.json/{word}/definitions": {
      "get": {
        "parameters": [
          {
            "description": "Word to return definitions for",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of results to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 200,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "CSV list of part-of-speech types",
            "in": "query",
            "name": "partOfSpeech",
            "required": false,
            "schema": {
              "enum": [
                "noun",
                "adjective",
                "verb",
                "adverb",
                "interjection",
                "pronoun",
                "preposition",
                "abbreviation",
                "affix",
                "article",
                "auxiliary-verb",
                "conjunction",
                "definite-article",
                "family-name",
                "given-name",
                "idiom",
                "imperative",
                "noun-plural",
                "noun-posessive",
                "past-participle",
                "phrasal-prefix",
                "proper-noun",
                "proper-noun-plural",
                "proper-noun-posessive",
                "suffix",
                "verb-intransitive",
                "verb-transitive"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return related words with definitions",
            "in": "query",
            "name": "includeRelated",
            "required": false,
            "schema": {
              "default": "false",
              "type": "string"
            }
          },
          {
            "description": "Source dictionary to return definitions from.  If 'all' is received, results are returned from all sources. If multiple values are received (e.g. 'century,wiktionary'), results are returned from the first specified dictionary that has definitions. If left blank, results are returned from the first dictionary that has definitions. By default, dictionaries are searched in this order: ahd-5, wiktionary, webster, century, wordnet",
            "in": "query",
            "name": "sourceDictionaries",
            "required": false,
            "schema": {
              "enum": [
                "all",
                "ahd-5",
                "century",
                "wiktionary",
                "webster",
                "wordnet"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
            "in": "query",
            "name": "useCanonical",
            "required": false,
            "schema": {
              "default": "false",
              "enum": [
                "false",
                "true"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return a closed set of XML tags in response",
            "in": "query",
            "name": "includeTags",
            "required": false,
            "schema": {
              "default": "false",
              "enum": [
                "false",
                "true"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Definition"
                  },
                  "type": "array"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "tags": [
          "word"
        ],
        "operationId": "getDefinitions",
        "summary": "Return definitions for a word"
      }
    },
    "/word.json/{word}/etymologies": {
      "get": {
        "parameters": [
          {
            "description": "Word to return",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
            "in": "query",
            "name": "useCanonical",
            "required": false,
            "schema": {
              "default": "false",
              "enum": [
                "false",
                "true"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "tags": [
          "word"
        ],
        "operationId": "getEtymologies",
        "summary": "Fetches etymology data"
      }
    },
    "/word.json/{word}/examples": {
      "get": {
        "parameters": [
          {
            "description": "Word to return examples for",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Show duplicate examples from different sources",
            "in": "query",
            "name": "includeDuplicates",
            "required": false,
            "schema": {
              "default": "false",
              "enum": [
                "false",
                "true"
              ],
              "type": "string"
            }
          },
          {
            "description": "If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
            "in": "query",
            "name": "useCanonical",
            "required": false,
            "schema": {
              "default": "false",
              "enum": [
                "false",
                "true"
              ],
              "type": "string"
            }
          },
          {
            "description": "Results to skip",
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of results to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 5,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExampleSearchResults"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "tags": [
          "word"
        ],
        "operationId": "getExamples",
        "summary": "Returns examples for a word"
      }
    },
    "/word.json/{word}/frequency": {
      "get": {
        "parameters": [
          {
            "description": "Word to return",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
            "in": "query",
            "name": "useCanonical",
            "required": false,
            "schema": {
              "default": "false",
              "enum": [
                "false",
                "true"
              ],
              "type": "string"
            }
          },
          {
            "description": "Starting Year",
            "in": "query",
            "name": "startYear",
            "required": false,
            "schema": {
              "default": 1800,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Ending Year",
            "in": "query",
            "name": "endYear",
            "required": false,
            "schema": {
              "default": 2012,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FrequencySummary"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "tags": [
          "word"
        ],
        "operationId": "getWordFrequency",
        "summary": "Returns word usage over time"
      }
    },
    "/word.json/{word}/hyphenation": {
      "get": {
        "parameters": [
          {
            "description": "Word to get syllables for",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
            "in": "query",
            "name": "useCanonical",
            "required": false,
            "schema": {
              "default": "false",
              "enum": [
                "false",
                "true"
              ],
              "type": "string"
            }
          },
          {
            "description": "Get from a single dictionary. Valid options: ahd-5, century, wiktionary, webster, and wordnet.",
            "in": "query",
            "name": "sourceDictionary",
            "required": false,
            "schema": {
              "enum": [
                "ahd-5",
                "century",
                "wiktionary",
                "webster",
                "wordnet"
              ],
              "type": "string"
            }
          },
          {
            "description": "Maximum number of results to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 50,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Syllable"
                  },
                  "type": "array"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "tags": [
          "word"
        ],
        "operationId": "getHyphenation",
        "summary": "Returns syllable information for a word"
      }
    },
    "/word.json/{word}/phrases": {
      "get": {
        "parameters": [
          {
            "description": "Word to fetch phrases for",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of results to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 5,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Minimum WLMI for the phrase",
            "in": "query",
            "name": "wlmi",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
            "in": "query",
            "name": "useCanonical",
            "required": false,
            "schema": {
              "default": "false",
              "enum": [
                "false",
                "true"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Bigram"
                  },
                  "type": "array"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "tags": [
          "word"
        ],
        "operationId": "getPhrases",
        "summary": "Fetches bi-gram phrases for a word"
      }
    },
    "/word.json/{word}/pronunciations": {
      "get": {
        "parameters": [
          {
            "description": "Word to get pronunciations for",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
            "in": "query",
            "name": "useCanonical",
            "required": false,
            "schema": {
              "default": "false",
              "enum": [
                "false",
                "true"
              ],
              "type": "string"
            }
          },
          {
            "description": "Get from a single dictionary",
            "in": "query",
            "name": "sourceDictionary",
            "required": false,
            "schema": {
              "enum": [
                "ahd-5",
                "century",
                "cmu",
                "macmillan",
                "wiktionary",
                "webster",
                "wordnet"
              ],
              "type": "string"
            }
          },
          {
            "description": "Text pronunciation type",
            "in": "query",
            "name": "typeFormat",
            "required": false,
            "schema": {
              "enum": [
                "ahd-5",
                "arpabet",
                "gcide-diacritical",
                "IPA"
              ],
              "type": "string"
            }
          },
          {
            "description": "Maximum number of results to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 50,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TextPron"
                  },
                  "type": "array"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "tags": [
          "word"
        ],
        "operationId": "getTextPronunciations",
        "summary": "Returns text pronunciations for a given word"
      }
    },
    "/word.json/{word}/relatedWords": {
      "get": {
        "parameters": [
          {
            "description": "Word to fetch relationships for",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
            "in": "query",
            "name": "useCanonical",
            "required": false,
            "schema": {
              "default": "false",
              "enum": [
                "false",
                "true"
              ],
              "type": "string"
            }
          },
          {
            "description": "Limits the total results per type of relationship type",
            "in": "query",
            "name": "relationshipTypes",
            "required": false,
            "schema": {
              "enum": [
                "synonym",
                "antonym",
                "variant",
                "equivalent",
                "cross-reference",
                "related-word",
                "rhyme",
                "form",
                "etymologically-related-term",
                "hypernym",
                "hyponym",
                "inflected-form",
                "primary",
                "same-context",
                "verb-form",
                "verb-stem",
                "has_topic"
              ],
              "type": "string"
            }
          },
          {
            "description": "Restrict to the supplied relationship types",
            "in": "query",
            "name": "limitPerRelationshipType",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Related"
                  },
                  "type": "array"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "tags": [
          "word"
        ],
        "operationId": "getRelatedWords",
        "summary": "Given a word as a string, returns relationships from the Word Graph"
      }
    },
    "/word.json/{word}/scrabbleScore": {
      "get": {
        "parameters": [
          {
            "description": "Word to get scrabble score for.",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "int64",
                  "type": "integer"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "tags": [
          "word"
        ],
        "operationId": "getScrabbleScore",
        "summary": "Returns the Scrabble score for a word"
      }
    },
    "/word.json/{word}/topExample": {
      "get": {
        "parameters": [
          {
            "description": "Word to fetch examples for",
            "in": "path",
            "name": "word",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested.",
            "in": "query",
            "name": "useCanonical",
            "required": false,
            "schema": {
              "default": "false",
              "enum": [
                "false",
                "true"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Example"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "tags": [
          "word"
        ],
        "operationId": "getTopExample",
        "summary": "Returns a top example for a word"
      }
    },
    "/words.json/randomWord": {
      "get": {
        "parameters": [
          {
            "description": "Only return words with dictionary definitions",
            "in": "query",
            "name": "hasDictionaryDef",
            "required": false,
            "schema": {
              "default": "true",
              "type": "string"
            }
          },
          {
            "description": "CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)",
            "in": "query",
            "name": "includePartOfSpeech",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)",
            "in": "query",
            "name": "excludePartOfSpeech",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Minimum corpus frequency for terms",
            "in": "query",
            "name": "minCorpusCount",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Maximum corpus frequency for terms",
            "in": "query",
            "name": "maxCorpusCount",
            "required": false,
            "schema": {
              "default": -1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Minimum dictionary count",
            "in": "query",
            "name": "minDictionaryCount",
            "required": false,
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Maximum dictionary count",
            "in": "query",
            "name": "maxDictionaryCount",
            "required": false,
            "schema": {
              "default": -1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Minimum word length",
            "in": "query",
            "name": "minLength",
            "required": false,
            "schema": {
              "default": 5,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Maximum word length",
            "in": "query",
            "name": "maxLength",
            "required": false,
            "schema": {
              "default": -1,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/WordObject"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "tags": [
          "words"
        ],
        "operationId": "getRandomWord",
        "summary": "Returns a single random WordObject"
      }
    },
    "/words.json/randomWords": {
      "get": {
        "parameters": [
          {
            "description": "Only return words with dictionary definitions",
            "in": "query",
            "name": "hasDictionaryDef",
            "required": false,
            "schema": {
              "default": "true",
              "type": "string"
            }
          },
          {
            "description": "CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)",
            "in": "query",
            "name": "includePartOfSpeech",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)",
            "in": "query",
            "name": "excludePartOfSpeech",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Minimum corpus frequency for terms",
            "in": "query",
            "name": "minCorpusCount",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Maximum corpus frequency for terms",
            "in": "query",
            "name": "maxCorpusCount",
            "required": false,
            "schema": {
              "default": -1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Minimum dictionary count",
            "in": "query",
            "name": "minDictionaryCount",
            "required": false,
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Maximum dictionary count",
            "in": "query",
            "name": "maxDictionaryCount",
            "required": false,
            "schema": {
              "default": -1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Minimum word length",
            "in": "query",
            "name": "minLength",
            "required": false,
            "schema": {
              "default": 5,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Maximum word length",
            "in": "query",
            "name": "maxLength",
            "required": false,
            "schema": {
              "default": -1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Attribute to sort by",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "enum": [
                "alpha",
                "count"
              ],
              "type": "string"
            }
          },
          {
            "description": "Sort direction",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Maximum number of results to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/WordObject"
                  },
                  "type": "array"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "tags": [
          "words"
        ],
        "operationId": "getRandomWords",
        "summary": "Returns an array of random WordObjects"
      }
    },
    "/words.json/reverseDictionary": {
      "get": {
        "parameters": [
          {
            "description": "Search term",
            "in": "query",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Restricts words and finds closest sense",
            "in": "query",
            "name": "findSenseForWord",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only include these comma-delimited source dictionaries",
            "in": "query",
            "name": "includeSourceDictionaries",
            "required": false,
            "schema": {
              "enum": [
                "ahd-5",
                "century",
                "cmu",
                "macmillan",
                "wiktionary",
                "webster",
                "wordnet"
              ],
              "type": "string"
            }
          },
          {
            "description": "Exclude these comma-delimited source dictionaries",
            "in": "query",
            "name": "excludeSourceDictionaries",
            "required": false,
            "schema": {
              "enum": [
                "ahd-5",
                "century",
                "cmu",
                "macmillan",
                "wiktionary",
                "webster",
                "wordnet"
              ],
              "type": "string"
            }
          },
          {
            "description": "Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)",
            "in": "query",
            "name": "includePartOfSpeech",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)",
            "in": "query",
            "name": "excludePartOfSpeech",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Minimum corpus frequency for terms",
            "in": "query",
            "name": "minCorpusCount",
            "required": false,
            "schema": {
              "default": 5,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Maximum corpus frequency for terms",
            "in": "query",
            "name": "maxCorpusCount",
            "required": false,
            "schema": {
              "default": -1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Minimum word length",
            "in": "query",
            "name": "minLength",
            "required": false,
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Maximum word length",
            "in": "query",
            "name": "maxLength",
            "required": false,
            "schema": {
              "default": -1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Expand terms",
            "in": "query",
            "name": "expandTerms",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return a closed set of XML tags in response",
            "in": "query",
            "name": "includeTags",
            "required": false,
            "schema": {
              "default": "false",
              "enum": [
                "false",
                "true"
              ],
              "type": "string"
            }
          },
          {
            "description": "Attribute to sort by",
            "in": "query",
            "name": "sortBy",
            "required": false,
            "schema": {
              "enum": [
                "alpha",
                "count"
              ],
              "type": "string"
            }
          },
          {
            "description": "Sort direction",
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Results to skip",
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": "0",
              "type": "string"
            }
          },
          {
            "description": "Maximum number of results to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DefinitionSearchResults"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "tags": [
          "words"
        ],
        "operationId": "reverseDictionary",
        "summary": "Reverse dictionary search"
      }
    },
    "/words.json/search/{query}": {
      "get": {
        "parameters": [
          {
            "description": "Search term is a Regular Expression",
            "in": "query",
            "name": "allowRegex",
            "required": false,
            "schema": {
              "default": "false",
              "type": "string"
            }
          },
          {
            "description": "Search query",
            "in": "path",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search case sensitive",
            "in": "query",
            "name": "caseSensitive",
            "required": false,
            "schema": {
              "default": "true",
              "type": "string"
            }
          },
          {
            "description": "Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)",
            "in": "query",
            "name": "includePartOfSpeech",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive)",
            "in": "query",
            "name": "excludePartOfSpeech",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Minimum corpus frequency for terms",
            "in": "query",
            "name": "minCorpusCount",
            "required": false,
            "schema": {
              "default": 5,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Maximum corpus frequency for terms",
            "in": "query",
            "name": "maxCorpusCount",
            "required": false,
            "schema": {
              "default": -1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Minimum number of dictionary entries for words returned",
            "in": "query",
            "name": "minDictionaryCount",
            "required": false,
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Maximum dictionary definition count",
            "in": "query",
            "name": "maxDictionaryCount",
            "required": false,
            "schema": {
              "default": -1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Minimum word length",
            "in": "query",
            "name": "minLength",
            "required": false,
            "schema": {
              "default": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Maximum word length",
            "in": "query",
            "name": "maxLength",
            "required": false,
            "schema": {
              "default": -1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Results to skip",
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Maximum number of results to return",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 10,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/WordSearchResults"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "tags": [
          "words"
        ],
        "operationId": "searchWords",
        "summary": "Searches words"
      }
    },
    "/words.json/wordOfTheDay": {
      "get": {
        "parameters": [
          {
            "description": "Fetches by date in yyyy-MM-dd",
            "in": "query",
            "name": "date",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/WordOfTheDay"
                }
              }
            },
            "description": "No response was specified"
          }
        },
        "tags": [
          "words"
        ],
        "operationId": "getWordOfTheDay",
        "summary": "Returns a specific WordOfTheDay"
      }
    }
  },
  "components": {
    "schemas": {
      "ApiTokenStatus": {
        "properties": {
          "expiresInMillis": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "remainingCalls": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "resetsInMillis": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "token": {
            "type": "string",
            "uniqueItems": false
          },
          "totalRequests": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "valid": {
            "type": "boolean",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "AudioFile": {
        "properties": {
          "attributionText": {
            "type": "string",
            "uniqueItems": false
          },
          "attributionUrl": {
            "type": "string",
            "uniqueItems": false
          },
          "audioType": {
            "type": "string",
            "uniqueItems": false
          },
          "commentCount": {
            "format": "int32",
            "type": "integer",
            "uniqueItems": false
          },
          "createdAt": {
            "format": "date",
            "type": "string",
            "uniqueItems": false
          },
          "createdBy": {
            "type": "string",
            "uniqueItems": false
          },
          "description": {
            "type": "string",
            "uniqueItems": false
          },
          "duration": {
            "format": "double",
            "type": "number",
            "uniqueItems": false
          },
          "fileUrl": {
            "type": "string",
            "uniqueItems": false
          },
          "id": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "voteAverage": {
            "format": "float",
            "type": "number",
            "uniqueItems": false
          },
          "voteCount": {
            "type": "integer",
            "uniqueItems": false
          },
          "voteWeightedAverage": {
            "format": "float",
            "type": "number",
            "uniqueItems": false
          },
          "word": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "uniqueItems": false
      },
      "AudioType": {
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer",
            "uniqueItems": false
          },
          "name": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "AuthenticationToken": {
        "properties": {
          "token": {
            "type": "string",
            "uniqueItems": false
          },
          "userId": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "userSignature": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "Bigram": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "gram1": {
            "type": "string",
            "uniqueItems": false
          },
          "gram2": {
            "type": "string",
            "uniqueItems": false
          },
          "mi": {
            "format": "double",
            "type": "number",
            "uniqueItems": false
          },
          "wlmi": {
            "format": "double",
            "type": "number",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "Category": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "name": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "uniqueItems": false
      },
      "Citation": {
        "properties": {
          "cite": {
            "type": "string",
            "uniqueItems": false
          },
          "source": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "ContentProvider": {
        "properties": {
          "id": {
            "format": "int32",
            "type": "integer",
            "uniqueItems": false
          },
          "name": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "Definition": {
        "properties": {
          "attributionText": {
            "type": "string",
            "uniqueItems": false
          },
          "attributionUrl": {
            "type": "string",
            "uniqueItems": false
          },
          "citations": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "exampleUses": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "extendedText": {
            "type": "string",
            "uniqueItems": false
          },
          "labels": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "notes": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "partOfSpeech": {
            "type": "string",
            "uniqueItems": false
          },
          "relatedWords": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "score": {
            "format": "float",
            "type": "number",
            "uniqueItems": false
          },
          "seqString": {
            "type": "string",
            "uniqueItems": false
          },
          "sequence": {
            "type": "string",
            "uniqueItems": false
          },
          "sourceDictionary": {
            "type": "string",
            "uniqueItems": false
          },
          "text": {
            "type": "string",
            "uniqueItems": false
          },
          "textProns": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "word": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "DefinitionSearchResults": {
        "properties": {
          "results": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "totalResults": {
            "format": "int32",
            "type": "integer",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "Example": {
        "properties": {
          "documentId": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "exampleId": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "id": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "provider": {
            "$ref": "#/components/schemas/ContentProvider",
            "uniqueItems": false
          },
          "rating": {
            "format": "float",
            "type": "number",
            "uniqueItems": false
          },
          "score": {
            "$ref": "#/components/schemas/ScoredWord",
            "uniqueItems": false
          },
          "sentence": {
            "$ref": "#/components/schemas/Sentence",
            "uniqueItems": false
          },
          "text": {
            "type": "string",
            "uniqueItems": false
          },
          "title": {
            "type": "string",
            "uniqueItems": false
          },
          "url": {
            "type": "string",
            "uniqueItems": false
          },
          "word": {
            "type": "string",
            "uniqueItems": false
          },
          "year": {
            "type": "integer",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "ExampleSearchResults": {
        "properties": {
          "examples": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "facets": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "ExampleUsage": {
        "properties": {
          "text": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "Facet": {
        "properties": {
          "facetValues": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "name": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "FacetValue": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "value": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "Frequency": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "year": {
            "format": "int32",
            "type": "integer",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "FrequencySummary": {
        "properties": {
          "frequency": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "frequencyString": {
            "type": "string",
            "uniqueItems": false
          },
          "totalCount": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "unknownYearCount": {
            "format": "int32",
            "type": "integer",
            "uniqueItems": false
          },
          "word": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "Label": {
        "properties": {
          "text": {
            "type": "string",
            "uniqueItems": false
          },
          "type": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "Long": {
        "properties": {
          "value": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "Note": {
        "properties": {
          "appliesTo": {
            "items": {
              "type": "string",
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "noteType": {
            "type": "string",
            "uniqueItems": false
          },
          "pos": {
            "format": "int32",
            "type": "integer",
            "uniqueItems": false
          },
          "value": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "PartOfSpeech": {
        "properties": {
          "allCategories": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "roots": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "storageAbbr": {
            "items": {
              "type": "string",
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "Related": {
        "properties": {
          "gram": {
            "type": "string",
            "uniqueItems": false
          },
          "label1": {
            "type": "string",
            "uniqueItems": false
          },
          "label2": {
            "type": "string",
            "uniqueItems": false
          },
          "label3": {
            "type": "string",
            "uniqueItems": false
          },
          "label4": {
            "type": "string",
            "uniqueItems": false
          },
          "relationshipType": {
            "type": "string",
            "uniqueItems": false
          },
          "words": {
            "items": {
              "type": "string",
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "Root": {
        "properties": {
          "categories": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "id": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "name": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "uniqueItems": false
      },
      "ScoredWord": {
        "properties": {
          "baseWordScore": {
            "format": "double",
            "type": "number",
            "uniqueItems": false
          },
          "docTermCount": {
            "format": "int32",
            "type": "integer",
            "uniqueItems": false
          },
          "id": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "lemma": {
            "type": "string",
            "uniqueItems": false
          },
          "partOfSpeech": {
            "type": "string",
            "uniqueItems": false
          },
          "position": {
            "format": "int32",
            "type": "integer",
            "uniqueItems": false
          },
          "score": {
            "format": "float",
            "type": "number",
            "uniqueItems": false
          },
          "sentenceId": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "stopword": {
            "type": "boolean",
            "uniqueItems": false
          },
          "word": {
            "type": "string",
            "uniqueItems": false
          },
          "wordType": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "Sentence": {
        "properties": {
          "display": {
            "type": "string",
            "uniqueItems": false
          },
          "documentMetadataId": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "hasScoredWords": {
            "type": "boolean",
            "uniqueItems": false
          },
          "id": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "rating": {
            "format": "int32",
            "type": "integer",
            "uniqueItems": false
          },
          "scoredWords": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "SimpleDefinition": {
        "properties": {
          "note": {
            "type": "string",
            "uniqueItems": false
          },
          "partOfSpeech": {
            "type": "string",
            "uniqueItems": false
          },
          "source": {
            "type": "string",
            "uniqueItems": false
          },
          "text": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "SimpleExample": {
        "properties": {
          "id": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "text": {
            "type": "string",
            "uniqueItems": false
          },
          "title": {
            "type": "string",
            "uniqueItems": false
          },
          "url": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "StringValue": {
        "properties": {
          "word": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "Syllable": {
        "properties": {
          "seq": {
            "format": "int32",
            "type": "integer",
            "uniqueItems": false
          },
          "text": {
            "type": "string",
            "uniqueItems": false
          },
          "type": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "TextPron": {
        "properties": {
          "raw": {
            "type": "string",
            "uniqueItems": false
          },
          "rawType": {
            "type": "string",
            "uniqueItems": false
          },
          "seq": {
            "format": "int32",
            "type": "integer",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "User": {
        "properties": {
          "displayName": {
            "type": "string",
            "uniqueItems": false
          },
          "email": {
            "type": "string",
            "uniqueItems": false
          },
          "faceBookId": {
            "type": "string",
            "uniqueItems": false
          },
          "id": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "password": {
            "type": "string",
            "uniqueItems": false
          },
          "status": {
            "format": "int32",
            "type": "integer",
            "uniqueItems": false
          },
          "userName": {
            "type": "string",
            "uniqueItems": false
          },
          "username": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "WordList": {
        "properties": {
          "createdAt": {
            "format": "date",
            "type": "string",
            "uniqueItems": false
          },
          "description": {
            "type": "string",
            "uniqueItems": false
          },
          "id": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "lastActivityAt": {
            "format": "date",
            "type": "string",
            "uniqueItems": false
          },
          "name": {
            "type": "string",
            "uniqueItems": false
          },
          "numberWordsInList": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "permalink": {
            "type": "string",
            "uniqueItems": false
          },
          "type": {
            "type": "string",
            "uniqueItems": false
          },
          "updatedAt": {
            "format": "date",
            "type": "string",
            "uniqueItems": false
          },
          "userId": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "username": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "uniqueItems": false
      },
      "WordListWord": {
        "properties": {
          "createdAt": {
            "format": "date",
            "type": "string",
            "uniqueItems": false
          },
          "id": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "numberCommentsOnWord": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "numberLists": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "userId": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "username": {
            "type": "string",
            "uniqueItems": false
          },
          "word": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "uniqueItems": false
      },
      "WordObject": {
        "properties": {
          "canonicalForm": {
            "type": "string",
            "uniqueItems": false
          },
          "id": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "originalWord": {
            "type": "string",
            "uniqueItems": false
          },
          "suggestions": {
            "items": {
              "type": "string",
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "vulgar": {
            "type": "string",
            "uniqueItems": false
          },
          "word": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "uniqueItems": false
      },
      "WordOfTheDay": {
        "properties": {
          "definitions": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "category": {
            "type": "string",
            "uniqueItems": false
          },
          "contentProvider": {
            "$ref": "#/components/schemas/ContentProvider",
            "uniqueItems": false
          },
          "createdAt": {
            "format": "date",
            "type": "string",
            "uniqueItems": false
          },
          "createdBy": {
            "type": "string",
            "uniqueItems": false
          },
          "examples": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "htmlExtra": {
            "type": "string",
            "uniqueItems": false
          },
          "id": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "note": {
            "type": "string",
            "uniqueItems": false
          },
          "parentId": {
            "type": "string",
            "uniqueItems": false
          },
          "publishDate": {
            "format": "date",
            "type": "string",
            "uniqueItems": false
          },
          "word": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "required": [
          "id"
        ],
        "type": "object",
        "uniqueItems": false
      },
      "WordSearchResult": {
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer",
            "uniqueItems": false
          },
          "lexicality": {
            "format": "double",
            "type": "number",
            "uniqueItems": false
          },
          "word": {
            "type": "string",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      },
      "WordSearchResults": {
        "properties": {
          "searchResults": {
            "items": {
              "uniqueItems": false
            },
            "type": "array",
            "uniqueItems": false
          },
          "totalResults": {
            "format": "int32",
            "type": "integer",
            "uniqueItems": false
          }
        },
        "type": "object",
        "uniqueItems": false
      }
    },
    "securitySchemes": {
      "api_key": {
        "in": "query",
        "name": "api_key",
        "type": "apiKey"
      },
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key authentication"
      }
    }
  },
  "security": [
    {
      "apiKey": []
    }
  ],
  "tags": [
    {
      "name": "word"
    },
    {
      "name": "words"
    }
  ]
}