{
  "components": {
    "examples": {},
    "headers": {},
    "parameters": {},
    "requestBodies": {},
    "responses": {},
    "schemas": {
      "Draft": {
        "deprecated": false,
        "description": "",
        "properties": {
          "@context": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": true,
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "type": "object"
              }
            ],
            "readOnly": true
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "rule": {
            "$ref": "#/components/schemas/DraftRule"
          },
          "status": {
            "description": "The type of change that this draft represents.",
            "enum": [
              "add",
              "update",
              "delete"
            ],
            "example": "add",
            "type": "string"
          }
        },
        "required": [
          "@context",
          "@id",
          "@type",
          "id",
          "status",
          "rule"
        ],
        "type": "object"
      },
      "DraftAbstractAction": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "configuration": "#/components/schemas/DraftActionConfiguration",
            "customBody": "#/components/schemas/DraftActionCustomBody",
            "customHtml": "#/components/schemas/DraftActionCustomHtml",
            "custom_status": "#/components/schemas/DraftActionCustomStatus",
            "gone": "#/components/schemas/DraftActionCustomStatus",
            "header": "#/components/schemas/DraftActionResponseHeader",
            "meta": "#/components/schemas/DraftActionSeoOverride",
            "redirection": "#/components/schemas/DraftActionRedirection",
            "robotsTxt": "#/components/schemas/DraftActionRobotsTXT",
            "sitemap": "#/components/schemas/DraftActionSitemap",
            "structuredData": "#/components/schemas/DraftActionStructuredData"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/DraftActionConfiguration"
          },
          {
            "$ref": "#/components/schemas/DraftActionCustomHtml"
          },
          {
            "$ref": "#/components/schemas/DraftActionCustomBody"
          },
          {
            "$ref": "#/components/schemas/DraftActionCustomStatus"
          },
          {
            "$ref": "#/components/schemas/DraftActionResponseHeader"
          },
          {
            "$ref": "#/components/schemas/DraftActionRedirection"
          },
          {
            "$ref": "#/components/schemas/DraftActionRobotsTXT"
          },
          {
            "$ref": "#/components/schemas/DraftActionSeoOverride"
          },
          {
            "$ref": "#/components/schemas/DraftActionSitemap"
          },
          {
            "$ref": "#/components/schemas/DraftActionStructuredData"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "DraftAbstractActionJson": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "configuration": "#/components/schemas/DraftActionConfigurationJson",
            "customBody": "#/components/schemas/DraftActionCustomBodyJson",
            "customHtml": "#/components/schemas/DraftActionCustomHtmlJson",
            "custom_status": "#/components/schemas/DraftActionCustomStatusJson",
            "gone": "#/components/schemas/DraftActionCustomStatusJson",
            "header": "#/components/schemas/DraftActionResponseHeaderJson",
            "meta": "#/components/schemas/DraftActionSeoOverrideJson",
            "redirection": "#/components/schemas/DraftActionRedirectionJson",
            "robotsTxt": "#/components/schemas/DraftActionRobotsTXTJson",
            "sitemap": "#/components/schemas/DraftActionSitemapJson",
            "structuredData": "#/components/schemas/DraftActionStructuredDataJson"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/DraftActionConfigurationJson"
          },
          {
            "$ref": "#/components/schemas/DraftActionCustomHtmlJson"
          },
          {
            "$ref": "#/components/schemas/DraftActionCustomBodyJson"
          },
          {
            "$ref": "#/components/schemas/DraftActionCustomStatusJson"
          },
          {
            "$ref": "#/components/schemas/DraftActionResponseHeaderJson"
          },
          {
            "$ref": "#/components/schemas/DraftActionRedirectionJson"
          },
          {
            "$ref": "#/components/schemas/DraftActionRobotsTXTJson"
          },
          {
            "$ref": "#/components/schemas/DraftActionSeoOverrideJson"
          },
          {
            "$ref": "#/components/schemas/DraftActionSitemapJson"
          },
          {
            "$ref": "#/components/schemas/DraftActionStructuredDataJson"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "DraftAbstractIpTrigger": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "equals": "#/components/schemas/DraftIpTriggerEquals",
            "greaterThan": "#/components/schemas/DraftIpTriggerGreaterThan",
            "greaterThanOrEquals": "#/components/schemas/DraftIpTriggerGreaterThanOrEquals",
            "inRange": "#/components/schemas/DraftIpTriggerInRange",
            "lessThan": "#/components/schemas/DraftIpTriggerLessThan",
            "lessThanOrEquals": "#/components/schemas/DraftIpTriggerLessThanOrEquals",
            "notEquals": "#/components/schemas/DraftIpTriggerNotEquals",
            "notInRange": "#/components/schemas/DraftIpTriggerNotInRange",
            "notOneOf": "#/components/schemas/DraftIpTriggerNotOneOf",
            "oneOf": "#/components/schemas/DraftIpTriggerOneOf"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/DraftIpTriggerEquals"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerNotEquals"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerOneOf"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerNotOneOf"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerGreaterThan"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerGreaterThanOrEquals"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerLessThan"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerLessThanOrEquals"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerInRange"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerNotInRange"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "DraftAbstractIpTriggerJson": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "equals": "#/components/schemas/DraftIpTriggerEqualsJson",
            "greaterThan": "#/components/schemas/DraftIpTriggerGreaterThanJson",
            "greaterThanOrEquals": "#/components/schemas/DraftIpTriggerGreaterThanOrEqualsJson",
            "inRange": "#/components/schemas/DraftIpTriggerInRangeJson",
            "lessThan": "#/components/schemas/DraftIpTriggerLessThanJson",
            "lessThanOrEquals": "#/components/schemas/DraftIpTriggerLessThanOrEqualsJson",
            "notEquals": "#/components/schemas/DraftIpTriggerNotEqualsJson",
            "notInRange": "#/components/schemas/DraftIpTriggerNotInRangeJson",
            "notOneOf": "#/components/schemas/DraftIpTriggerNotOneOfJson",
            "oneOf": "#/components/schemas/DraftIpTriggerOneOfJson"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/DraftIpTriggerEqualsJson"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerNotEqualsJson"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerOneOfJson"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerNotOneOfJson"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerGreaterThanJson"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerGreaterThanOrEqualsJson"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerLessThanJson"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerLessThanOrEqualsJson"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerInRangeJson"
          },
          {
            "$ref": "#/components/schemas/DraftIpTriggerNotInRangeJson"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "DraftAbstractMarker": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "anything": "#/components/schemas/DraftAnything",
            "custom": "#/components/schemas/DraftCustom",
            "date": "#/components/schemas/DraftDate",
            "datetime": "#/components/schemas/DraftDatetime",
            "enum": "#/components/schemas/DraftEnum",
            "integer": "#/components/schemas/DraftInteger",
            "string": "#/components/schemas/DraftString_",
            "uuid": "#/components/schemas/DraftUuid"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/DraftAnything"
          },
          {
            "$ref": "#/components/schemas/DraftCustom"
          },
          {
            "$ref": "#/components/schemas/DraftDate"
          },
          {
            "$ref": "#/components/schemas/DraftDatetime"
          },
          {
            "$ref": "#/components/schemas/DraftEnum"
          },
          {
            "$ref": "#/components/schemas/DraftInteger"
          },
          {
            "$ref": "#/components/schemas/DraftString_"
          },
          {
            "$ref": "#/components/schemas/DraftUuid"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "DraftAbstractMarkerJson": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "anything": "#/components/schemas/DraftAnythingJson",
            "custom": "#/components/schemas/DraftCustomJson",
            "date": "#/components/schemas/DraftDateJson",
            "datetime": "#/components/schemas/DraftDatetimeJson",
            "enum": "#/components/schemas/DraftEnumJson",
            "integer": "#/components/schemas/DraftIntegerJson",
            "string": "#/components/schemas/DraftString_Json",
            "uuid": "#/components/schemas/DraftUuidJson"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/DraftAnythingJson"
          },
          {
            "$ref": "#/components/schemas/DraftCustomJson"
          },
          {
            "$ref": "#/components/schemas/DraftDateJson"
          },
          {
            "$ref": "#/components/schemas/DraftDatetimeJson"
          },
          {
            "$ref": "#/components/schemas/DraftEnumJson"
          },
          {
            "$ref": "#/components/schemas/DraftIntegerJson"
          },
          {
            "$ref": "#/components/schemas/DraftString_Json"
          },
          {
            "$ref": "#/components/schemas/DraftUuidJson"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "DraftAbstractTransformer": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "camelize": "#/components/schemas/DraftCamelize",
            "dasherize": "#/components/schemas/DraftDasherize",
            "lowercase": "#/components/schemas/DraftLowercase",
            "replace": "#/components/schemas/DraftReplace",
            "slice": "#/components/schemas/DraftSlice",
            "underscorize": "#/components/schemas/DraftUnderscorize",
            "uppercase": "#/components/schemas/DraftUppercase"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/DraftCamelize"
          },
          {
            "$ref": "#/components/schemas/DraftDasherize"
          },
          {
            "$ref": "#/components/schemas/DraftLowercase"
          },
          {
            "$ref": "#/components/schemas/DraftReplace"
          },
          {
            "$ref": "#/components/schemas/DraftSlice"
          },
          {
            "$ref": "#/components/schemas/DraftUnderscorize"
          },
          {
            "$ref": "#/components/schemas/DraftUppercase"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "DraftAbstractTransformerJson": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "camelize": "#/components/schemas/DraftCamelizeJson",
            "dasherize": "#/components/schemas/DraftDasherizeJson",
            "lowercase": "#/components/schemas/DraftLowercaseJson",
            "replace": "#/components/schemas/DraftReplaceJson",
            "slice": "#/components/schemas/DraftSliceJson",
            "underscorize": "#/components/schemas/DraftUnderscorizeJson",
            "uppercase": "#/components/schemas/DraftUppercaseJson"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/DraftCamelizeJson"
          },
          {
            "$ref": "#/components/schemas/DraftDasherizeJson"
          },
          {
            "$ref": "#/components/schemas/DraftLowercaseJson"
          },
          {
            "$ref": "#/components/schemas/DraftReplaceJson"
          },
          {
            "$ref": "#/components/schemas/DraftSliceJson"
          },
          {
            "$ref": "#/components/schemas/DraftUnderscorizeJson"
          },
          {
            "$ref": "#/components/schemas/DraftUppercaseJson"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "DraftAbstractVariable": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "marker": "#/components/schemas/DraftMarker",
            "requestHeader": "#/components/schemas/DraftRequestHeader",
            "requestHost": "#/components/schemas/DraftRequestHost",
            "requestMethod": "#/components/schemas/DraftRequestMethod",
            "requestPath": "#/components/schemas/DraftRequestPath",
            "requestRemoteAddress": "#/components/schemas/DraftRequestRemoteAddress",
            "requestScheme": "#/components/schemas/DraftRequestScheme",
            "requestTime": "#/components/schemas/DraftRequestTime"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/DraftMarker"
          },
          {
            "$ref": "#/components/schemas/DraftRequestHeader"
          },
          {
            "$ref": "#/components/schemas/DraftRequestHost"
          },
          {
            "$ref": "#/components/schemas/DraftRequestMethod"
          },
          {
            "$ref": "#/components/schemas/DraftRequestPath"
          },
          {
            "$ref": "#/components/schemas/DraftRequestRemoteAddress"
          },
          {
            "$ref": "#/components/schemas/DraftRequestScheme"
          },
          {
            "$ref": "#/components/schemas/DraftRequestTime"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "DraftAbstractVariableJson": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "marker": "#/components/schemas/DraftMarkerJson",
            "requestHeader": "#/components/schemas/DraftRequestHeaderJson",
            "requestHost": "#/components/schemas/DraftRequestHostJson",
            "requestMethod": "#/components/schemas/DraftRequestMethodJson",
            "requestPath": "#/components/schemas/DraftRequestPathJson",
            "requestRemoteAddress": "#/components/schemas/DraftRequestRemoteAddressJson",
            "requestScheme": "#/components/schemas/DraftRequestSchemeJson",
            "requestTime": "#/components/schemas/DraftRequestTimeJson"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/DraftMarkerJson"
          },
          {
            "$ref": "#/components/schemas/DraftRequestHeaderJson"
          },
          {
            "$ref": "#/components/schemas/DraftRequestHostJson"
          },
          {
            "$ref": "#/components/schemas/DraftRequestMethodJson"
          },
          {
            "$ref": "#/components/schemas/DraftRequestPathJson"
          },
          {
            "$ref": "#/components/schemas/DraftRequestRemoteAddressJson"
          },
          {
            "$ref": "#/components/schemas/DraftRequestSchemeJson"
          },
          {
            "$ref": "#/components/schemas/DraftRequestTimeJson"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "DraftActionConfiguration": {
        "deprecated": false,
        "description": "",
        "properties": {
          "logEnabled": {
            "type": "boolean"
          },
          "reset": {
            "type": "boolean"
          },
          "stop": {
            "type": "boolean"
          },
          "type": {
            "enum": [
              "configuration"
            ],
            "type": "string"
          }
        },
        "required": [
          "logEnabled",
          "reset",
          "stop",
          "type"
        ],
        "type": "object"
      },
      "DraftActionConfigurationJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "logEnabled": {
            "type": "boolean"
          },
          "reset": {
            "type": "boolean"
          },
          "stop": {
            "type": "boolean"
          },
          "type": {
            "enum": [
              "configuration"
            ],
            "type": "string"
          }
        },
        "required": [
          "logEnabled",
          "reset",
          "stop",
          "type"
        ],
        "type": "object"
      },
      "DraftActionCustomBody": {
        "deprecated": false,
        "description": "",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "type": {
            "enum": [
              "customBody"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "contentType",
          "type"
        ],
        "type": "object"
      },
      "DraftActionCustomBodyJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "type": {
            "enum": [
              "customBody"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "contentType",
          "type"
        ],
        "type": "object"
      },
      "DraftActionCustomHtml": {
        "deprecated": false,
        "description": "",
        "properties": {
          "location": {
            "enum": [
              "headStart",
              "headEnd",
              "bodyStart",
              "bodyEnd"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "customHtml"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "location",
          "type"
        ],
        "type": "object"
      },
      "DraftActionCustomHtmlJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "location": {
            "enum": [
              "headStart",
              "headEnd",
              "bodyStart",
              "bodyEnd"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "customHtml"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "location",
          "type"
        ],
        "type": "object"
      },
      "DraftActionCustomStatus": {
        "deprecated": false,
        "description": "",
        "properties": {
          "statusCode": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "custom_status",
              "gone"
            ],
            "type": "string"
          }
        },
        "required": [
          "statusCode",
          "type"
        ],
        "type": "object"
      },
      "DraftActionCustomStatusJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "statusCode": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "custom_status",
              "gone"
            ],
            "type": "string"
          }
        },
        "required": [
          "statusCode",
          "type"
        ],
        "type": "object"
      },
      "DraftActionRedirection": {
        "deprecated": false,
        "description": "",
        "properties": {
          "location": {
            "type": "string"
          },
          "statusCode": {
            "enum": [
              301,
              302,
              307,
              308
            ],
            "type": "integer"
          },
          "type": {
            "enum": [
              "redirection"
            ],
            "type": "string"
          }
        },
        "required": [
          "location",
          "statusCode",
          "type"
        ],
        "type": "object"
      },
      "DraftActionRedirectionJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "location": {
            "type": "string"
          },
          "statusCode": {
            "enum": [
              301,
              302,
              307,
              308
            ],
            "type": "integer"
          },
          "type": {
            "enum": [
              "redirection"
            ],
            "type": "string"
          }
        },
        "required": [
          "location",
          "statusCode",
          "type"
        ],
        "type": "object"
      },
      "DraftActionResponseHeader": {
        "deprecated": false,
        "description": "",
        "properties": {
          "mode": {
            "enum": [
              "override",
              "default",
              "replace",
              "add",
              "remove"
            ],
            "example": "default",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "override": {
            "deprecated": true,
            "type": [
              "boolean",
              "null"
            ]
          },
          "type": {
            "enum": [
              "header"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value",
          "mode",
          "override",
          "type"
        ],
        "type": "object"
      },
      "DraftActionResponseHeaderJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "mode": {
            "enum": [
              "override",
              "default",
              "replace",
              "add",
              "remove"
            ],
            "example": "default",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "override": {
            "deprecated": true,
            "type": [
              "boolean",
              "null"
            ]
          },
          "type": {
            "enum": [
              "header"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value",
          "mode",
          "override",
          "type"
        ],
        "type": "object"
      },
      "DraftActionRobotsTXT": {
        "deprecated": false,
        "description": "",
        "properties": {
          "content": {
            "type": "string"
          },
          "type": {
            "enum": [
              "robotsTxt"
            ],
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "type": "object"
      },
      "DraftActionRobotsTXTJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "content": {
            "type": "string"
          },
          "type": {
            "enum": [
              "robotsTxt"
            ],
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "type": "object"
      },
      "DraftActionSeoOverride": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "enum": [
              "title",
              "description",
              "keywords",
              "author",
              "og:title",
              "og:description",
              "og:type",
              "og:image",
              "og:url",
              "og:locale",
              "og:site_name"
            ],
            "type": "string"
          },
          "replace": {
            "type": "boolean"
          },
          "type": {
            "enum": [
              "meta"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value",
          "replace",
          "type"
        ],
        "type": "object"
      },
      "DraftActionSeoOverrideJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "enum": [
              "title",
              "description",
              "keywords",
              "author",
              "og:title",
              "og:description",
              "og:type",
              "og:image",
              "og:url",
              "og:locale",
              "og:site_name"
            ],
            "type": "string"
          },
          "replace": {
            "type": "boolean"
          },
          "type": {
            "enum": [
              "meta"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value",
          "replace",
          "type"
        ],
        "type": "object"
      },
      "DraftActionSitemap": {
        "deprecated": false,
        "description": "",
        "properties": {
          "content": {
            "type": "string"
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": {
            "enum": [
              "sitemap"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "content",
          "type"
        ],
        "type": "object"
      },
      "DraftActionSitemapJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "content": {
            "type": "string"
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": {
            "enum": [
              "sitemap"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "content",
          "type"
        ],
        "type": "object"
      },
      "DraftActionStructuredData": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "structuredData"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "type"
        ],
        "type": "object"
      },
      "DraftActionStructuredDataJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "structuredData"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "type"
        ],
        "type": "object"
      },
      "DraftAnything": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "anything"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftAnythingJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "anything"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftCamelize": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "camelize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DraftCamelizeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "camelize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DraftCustom": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "regex": {
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "custom"
            ],
            "type": "string"
          }
        },
        "required": [
          "regex",
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftCustomJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "regex": {
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "custom"
            ],
            "type": "string"
          }
        },
        "required": [
          "regex",
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftDasherize": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "dasherize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DraftDasherizeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "dasherize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DraftDate": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "date"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftDateJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "date"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftDateTimeTrigger": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the date and time will be compared.",
            "enum": [
              "before",
              "after",
              "between",
              "notBetween"
            ],
            "example": "after",
            "type": "string"
          },
          "value": {
            "description": "A datetime (for after and before operators), or an array of two datetimes (for between and notBetween operators).",
            "example": [
              "2021-01-01 08:27:09",
              "2021-01-31 19:15:00"
            ],
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator",
          "value"
        ],
        "type": "object"
      },
      "DraftDateTimeTriggerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the date and time will be compared.",
            "enum": [
              "before",
              "after",
              "between",
              "notBetween"
            ],
            "example": "after",
            "type": "string"
          },
          "value": {
            "description": "A datetime (for after and before operators), or an array of two datetimes (for between and notBetween operators).",
            "example": [
              "2021-01-01 08:27:09",
              "2021-01-31 19:15:00"
            ],
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator",
          "value"
        ],
        "type": "object"
      },
      "DraftDateTrigger": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the date will be compared.",
            "enum": [
              "equals",
              "notEquals",
              "before",
              "after",
              "between",
              "notBetween",
              "weekdays"
            ],
            "example": "equals",
            "type": "string"
          },
          "value": {
            "description": "A date (for equals, notEquals, after or before operators), an array of two dates (for between or notBetween operators), or an array of integers (for weekdays operator, 0 for Sunday, 1 for Monday, and so on).",
            "example": "2023-03-07",
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator",
          "value"
        ],
        "type": "object"
      },
      "DraftDateTriggerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the date will be compared.",
            "enum": [
              "equals",
              "notEquals",
              "before",
              "after",
              "between",
              "notBetween",
              "weekdays"
            ],
            "example": "equals",
            "type": "string"
          },
          "value": {
            "description": "A date (for equals, notEquals, after or before operators), an array of two dates (for between or notBetween operators), or an array of integers (for weekdays operator, 0 for Sunday, 1 for Monday, and so on).",
            "example": "2023-03-07",
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator",
          "value"
        ],
        "type": "object"
      },
      "DraftDatetime": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "datetime"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftDatetimeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "datetime"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftEnum": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "enum"
            ],
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "values",
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftEnumJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "enum"
            ],
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "values",
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftExample": {
        "deprecated": false,
        "description": "",
        "properties": {
          "datetime": {
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "headers": {
            "items": {
              "$ref": "#/components/schemas/DraftHeader1"
            },
            "type": "array"
          },
          "ipAddress": {
            "type": [
              "string",
              "null"
            ]
          },
          "method": {
            "type": [
              "string",
              "null"
            ]
          },
          "mustMatch": {
            "type": "boolean"
          },
          "responseStatusCode": {
            "maximum": 599,
            "minimum": 100,
            "type": [
              "integer",
              "null"
            ]
          },
          "url": {
            "pattern": "^(.*(^(/|://|https?://).*).*)$",
            "type": "string"
          }
        },
        "required": [
          "mustMatch",
          "url",
          "method",
          "responseStatusCode",
          "headers",
          "ipAddress",
          "datetime"
        ],
        "type": "object"
      },
      "DraftExampleJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "datetime": {
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "headers": {
            "items": {
              "$ref": "#/components/schemas/DraftHeader1Json"
            },
            "type": "array"
          },
          "ipAddress": {
            "type": [
              "string",
              "null"
            ]
          },
          "method": {
            "type": [
              "string",
              "null"
            ]
          },
          "mustMatch": {
            "type": "boolean"
          },
          "responseStatusCode": {
            "maximum": 599,
            "minimum": 100,
            "type": [
              "integer",
              "null"
            ]
          },
          "url": {
            "pattern": "^(.*(^(/|://|https?://).*).*)$",
            "type": "string"
          }
        },
        "required": [
          "mustMatch",
          "url",
          "method",
          "responseStatusCode",
          "headers",
          "ipAddress",
          "datetime"
        ],
        "type": "object"
      },
      "DraftHeader": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The operator with which the value will be compared",
            "example": "Accept",
            "type": "string"
          },
          "operator": {
            "description": "The name of the request HTTP header",
            "enum": [
              "isDefined",
              "isNotDefined",
              "equals",
              "isNotEqualTo",
              "contains",
              "doesNotContain",
              "endsWith",
              "startsWith",
              "matchesRegex"
            ],
            "example": "isNotEqualTo",
            "type": "string"
          },
          "value": {
            "example": "application/json",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "name",
          "operator",
          "value"
        ],
        "type": "object"
      },
      "DraftHeader1": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "DraftHeader1Json": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "DraftHeaderJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The operator with which the value will be compared",
            "example": "Accept",
            "type": "string"
          },
          "operator": {
            "description": "The name of the request HTTP header",
            "enum": [
              "isDefined",
              "isNotDefined",
              "equals",
              "isNotEqualTo",
              "contains",
              "doesNotContain",
              "endsWith",
              "startsWith",
              "matchesRegex"
            ],
            "example": "isNotEqualTo",
            "type": "string"
          },
          "value": {
            "example": "application/json",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "name",
          "operator",
          "value"
        ],
        "type": "object"
      },
      "DraftInteger": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "maximum": {
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "minimum": {
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "integer"
            ],
            "type": "string"
          }
        },
        "required": [
          "minimum",
          "maximum",
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftIntegerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "maximum": {
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "minimum": {
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "integer"
            ],
            "type": "string"
          }
        },
        "required": [
          "minimum",
          "maximum",
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerEquals": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The value of the request IP address to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "equals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerEqualsJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The value of the request IP address to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "equals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerGreaterThan": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum (excluded) value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "greaterThan"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerGreaterThanJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum (excluded) value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "greaterThan"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerGreaterThanOrEquals": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "greaterThanOrEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerGreaterThanOrEqualsJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "greaterThanOrEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerInRange": {
        "deprecated": false,
        "description": "",
        "properties": {
          "end": {
            "description": "The upper (included) bound of the IP range to which the request IP address must belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "start": {
            "description": "The lower (included) bound of the IP range to which the request IP address must belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "inRange"
            ],
            "type": "string"
          }
        },
        "required": [
          "start",
          "end",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerInRangeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "end": {
            "description": "The upper (included) bound of the IP range to which the request IP address must belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "start": {
            "description": "The lower (included) bound of the IP range to which the request IP address must belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "inRange"
            ],
            "type": "string"
          }
        },
        "required": [
          "start",
          "end",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerLessThan": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum (excluded) value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "lessThan"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerLessThanJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum (excluded) value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "lessThan"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerLessThanOrEquals": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The maximum value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "lessThanOrEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerLessThanOrEqualsJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The maximum value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "lessThanOrEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerNotEquals": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The value of the request IP address must be different to this value to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "notEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerNotEqualsJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The value of the request IP address must be different to this value to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "notEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerNotInRange": {
        "deprecated": false,
        "description": "",
        "properties": {
          "end": {
            "description": "The upper (included) bound of the IP range to which the request IP address must not belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "start": {
            "description": "The lower (included) bound of the IP range to which the request IP address must not belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "notInRange"
            ],
            "type": "string"
          }
        },
        "required": [
          "start",
          "end",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerNotInRangeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "end": {
            "description": "The upper (included) bound of the IP range to which the request IP address must not belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "start": {
            "description": "The lower (included) bound of the IP range to which the request IP address must not belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "notInRange"
            ],
            "type": "string"
          }
        },
        "required": [
          "start",
          "end",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerNotOneOf": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ips": {
            "description": "The list the request IP address must be one of to trigger this rule",
            "items": {
              "example": "1.2.3.4",
              "format": "ipv4",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "type": {
            "enum": [
              "notOneOf"
            ],
            "type": "string"
          }
        },
        "required": [
          "ips",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerNotOneOfJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ips": {
            "description": "The list the request IP address must be one of to trigger this rule",
            "items": {
              "example": "1.2.3.4",
              "format": "ipv4",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "type": {
            "enum": [
              "notOneOf"
            ],
            "type": "string"
          }
        },
        "required": [
          "ips",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerOneOf": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ips": {
            "description": "The list the request IP address must be one of to trigger this rule",
            "items": {
              "example": "1.2.3.4",
              "format": "ipv4",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "type": {
            "enum": [
              "oneOf"
            ],
            "type": "string"
          }
        },
        "required": [
          "ips",
          "type"
        ],
        "type": "object"
      },
      "DraftIpTriggerOneOfJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ips": {
            "description": "The list the request IP address must be one of to trigger this rule",
            "items": {
              "example": "1.2.3.4",
              "format": "ipv4",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "type": {
            "enum": [
              "oneOf"
            ],
            "type": "string"
          }
        },
        "required": [
          "ips",
          "type"
        ],
        "type": "object"
      },
      "DraftJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "id": {
            "type": "string"
          },
          "rule": {
            "$ref": "#/components/schemas/DraftRuleJson"
          },
          "status": {
            "description": "The type of change that this draft represents.",
            "enum": [
              "add",
              "update",
              "delete"
            ],
            "example": "add",
            "type": "string"
          }
        },
        "required": [
          "id",
          "status",
          "rule"
        ],
        "type": "object"
      },
      "DraftLowercase": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "lowercase"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DraftLowercaseJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "lowercase"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DraftMarker": {
        "deprecated": false,
        "description": "",
        "properties": {
          "marker": {
            "description": "The name of the trigger marker to associate with this variable",
            "example": "markerName",
            "type": "string"
          },
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "marker"
            ],
            "type": "string"
          }
        },
        "required": [
          "marker",
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftMarkerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "marker": {
            "description": "The name of the trigger marker to associate with this variable",
            "example": "markerName",
            "type": "string"
          },
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "marker"
            ],
            "type": "string"
          }
        },
        "required": [
          "marker",
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftReplace": {
        "deprecated": false,
        "description": "",
        "properties": {
          "something": {
            "description": "The value to be replaced",
            "example": "foo",
            "type": "string"
          },
          "type": {
            "enum": [
              "replace"
            ],
            "type": "string"
          },
          "with": {
            "description": "The value to use as replacement",
            "example": "bar",
            "type": "string"
          }
        },
        "required": [
          "something",
          "with",
          "type"
        ],
        "type": "object"
      },
      "DraftReplaceJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "something": {
            "description": "The value to be replaced",
            "example": "foo",
            "type": "string"
          },
          "type": {
            "enum": [
              "replace"
            ],
            "type": "string"
          },
          "with": {
            "description": "The value to use as replacement",
            "example": "bar",
            "type": "string"
          }
        },
        "required": [
          "something",
          "with",
          "type"
        ],
        "type": "object"
      },
      "DraftRequestHeader": {
        "deprecated": false,
        "description": "",
        "properties": {
          "defaultValue": {
            "type": [
              "string",
              "null"
            ]
          },
          "headerName": {
            "type": "string"
          },
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestHeader"
            ],
            "type": "string"
          }
        },
        "required": [
          "headerName",
          "defaultValue",
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftRequestHeaderJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "defaultValue": {
            "type": [
              "string",
              "null"
            ]
          },
          "headerName": {
            "type": "string"
          },
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestHeader"
            ],
            "type": "string"
          }
        },
        "required": [
          "headerName",
          "defaultValue",
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftRequestHost": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestHost"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftRequestHostJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestHost"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftRequestMethod": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestMethod"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftRequestMethodJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestMethod"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftRequestPath": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestPath"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftRequestPathJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestPath"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftRequestRemoteAddress": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestRemoteAddress"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftRequestRemoteAddressJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestRemoteAddress"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftRequestScheme": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestScheme"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftRequestSchemeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestScheme"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftRequestTime": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestTime"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftRequestTimeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestTime"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftRule": {
        "deprecated": false,
        "description": "",
        "properties": {
          "actions": {
            "description": "Each `Action` must be an object with a `type` property, and some other properties according to its type:\n\n* `configuration`:\n    * `logEnabled` (bool, required)\n    * `reset` (bool, required)\n * `customHtml`:\n    * `value` (string, required)\n    * `location` (string, required). One of `headStart`, `headEnd`, `bodyStart`, `bodyEnd`\n* `customBody`:\n    * `value` (string, required)\n    * `contentType` (string, required). Content-type header to use for the response.\n* `customStatus` (previously `gone`):\n    * `statusCode` (int, required). A valid status code between 200 and 511 ([see the official documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses) for more information)\n* `header`:\n    * `name` (string, required)\n    * `value` (string, required)\n    * `mode` (string, required). One of `override`, `default`, `replace`, `append`, `add`\n    * `override` (bool, deprecated). Use the `mode` property instead.\n* `meta`:\n    * `type` (string, required). One of `title`, `description`, `keywords`, `author`, `og:title`, `og:description`, `og:type`, `og:image`, `og:url`, `og:locale`, `og:site_name`\n    * `value` (string, required)\n    * `replace` (bool, required)\n* `redirection`:\n    * `location` (string, required)\n    * `statusCode` (int, required). One of `301`, `302`, `307`, `308`\n * `robotsTxt`:\n    * `content` (string, required)\n* `sitemap`:\n    * `name` (string)\n    * `content` (string, required)\n* `structuredData`:\n    * `value` (string, required)",
            "example": [
              {
                "location": "headStart",
                "type": "customHtml",
                "value": "<!-- Hello -->"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractAction"
            },
            "minItems": 1,
            "type": "array"
          },
          "description": {
            "description": "This description field is used to describe the rule and share knowledge with other users",
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "default": true,
            "description": "Set to `false` to disable this rule",
            "example": true,
            "type": "boolean"
          },
          "examples": {
            "description": "Examples are useful to test your rule. They are not used in production.",
            "items": {
              "$ref": "#/components/schemas/DraftExample"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "markers": {
            "description": "Each `Marker` must be an object with a `type` property, and some other properties according to its type:\n* `anything`: No options\n * `custom`:\n    * `regex` (string, required)\n* `enum`\n    * `values` (array of string, required)\n* `date`: No options\n* `datetime`: No options\n * `integer`:\n    * `minimum` (int, required)\n    * `maximum` (int, required)\n * `string`:\n    * `allowLowercaseAlphabet` (bool)\n    * `allowUppercaseAlphabet` (bool)\n    * `allowDigits` (bool)\n    * `allowPercentEncodedChars` (bool)\n    * `specificCharacters` (array of string of length 1)\n    * `startingWith` (string)\n    * `endingWith` (string)\n    * `containing` (string)\n* `uuid`: No options",
            "example": [
              {
                "name": "someMarkerName",
                "transformers": [
                  {
                    "from": "0",
                    "to": "2",
                    "type": "slice"
                  }
                ],
                "type": "enum",
                "values": [
                  "dog",
                  "cat"
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractMarker"
            },
            "type": "array"
          },
          "metadata": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "priority": {
            "description": "A rule with higher priority takes precedence over lower priorities, which means that the actions defined in the higher priority rule will override the similar actions defined in a lower priority one",
            "type": "integer"
          },
          "tags": {
            "description": "Tags are useful to filter rules and retrieve them easily",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trigger": {
            "$ref": "#/components/schemas/DraftTrigger"
          },
          "variables": {
            "items": {
              "$ref": "#/components/schemas/DraftAbstractVariable"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "trigger",
          "actions",
          "markers",
          "variables",
          "examples",
          "priority",
          "description",
          "metadata",
          "enabled",
          "tags"
        ],
        "type": "object"
      },
      "DraftRuleJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "actions": {
            "description": "Each `Action` must be an object with a `type` property, and some other properties according to its type:\n\n* `configuration`:\n    * `logEnabled` (bool, required)\n    * `reset` (bool, required)\n * `customHtml`:\n    * `value` (string, required)\n    * `location` (string, required). One of `headStart`, `headEnd`, `bodyStart`, `bodyEnd`\n* `customBody`:\n    * `value` (string, required)\n    * `contentType` (string, required). Content-type header to use for the response.\n* `customStatus` (previously `gone`):\n    * `statusCode` (int, required). A valid status code between 200 and 511 ([see the official documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses) for more information)\n* `header`:\n    * `name` (string, required)\n    * `value` (string, required)\n    * `mode` (string, required). One of `override`, `default`, `replace`, `append`, `add`\n    * `override` (bool, deprecated). Use the `mode` property instead.\n* `meta`:\n    * `type` (string, required). One of `title`, `description`, `keywords`, `author`, `og:title`, `og:description`, `og:type`, `og:image`, `og:url`, `og:locale`, `og:site_name`\n    * `value` (string, required)\n    * `replace` (bool, required)\n* `redirection`:\n    * `location` (string, required)\n    * `statusCode` (int, required). One of `301`, `302`, `307`, `308`\n * `robotsTxt`:\n    * `content` (string, required)\n* `sitemap`:\n    * `name` (string)\n    * `content` (string, required)\n* `structuredData`:\n    * `value` (string, required)",
            "example": [
              {
                "location": "headStart",
                "type": "customHtml",
                "value": "<!-- Hello -->"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractActionJson"
            },
            "minItems": 1,
            "type": "array"
          },
          "description": {
            "description": "This description field is used to describe the rule and share knowledge with other users",
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "default": true,
            "description": "Set to `false` to disable this rule",
            "example": true,
            "type": "boolean"
          },
          "examples": {
            "description": "Examples are useful to test your rule. They are not used in production.",
            "items": {
              "$ref": "#/components/schemas/DraftExampleJson"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "markers": {
            "description": "Each `Marker` must be an object with a `type` property, and some other properties according to its type:\n* `anything`: No options\n * `custom`:\n    * `regex` (string, required)\n* `enum`\n    * `values` (array of string, required)\n* `date`: No options\n* `datetime`: No options\n * `integer`:\n    * `minimum` (int, required)\n    * `maximum` (int, required)\n * `string`:\n    * `allowLowercaseAlphabet` (bool)\n    * `allowUppercaseAlphabet` (bool)\n    * `allowDigits` (bool)\n    * `allowPercentEncodedChars` (bool)\n    * `specificCharacters` (array of string of length 1)\n    * `startingWith` (string)\n    * `endingWith` (string)\n    * `containing` (string)\n* `uuid`: No options",
            "example": [
              {
                "name": "someMarkerName",
                "transformers": [
                  {
                    "from": "0",
                    "to": "2",
                    "type": "slice"
                  }
                ],
                "type": "enum",
                "values": [
                  "dog",
                  "cat"
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractMarkerJson"
            },
            "type": "array"
          },
          "metadata": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "priority": {
            "description": "A rule with higher priority takes precedence over lower priorities, which means that the actions defined in the higher priority rule will override the similar actions defined in a lower priority one",
            "type": "integer"
          },
          "tags": {
            "description": "Tags are useful to filter rules and retrieve them easily",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trigger": {
            "$ref": "#/components/schemas/DraftTriggerJson"
          },
          "variables": {
            "items": {
              "$ref": "#/components/schemas/DraftAbstractVariableJson"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "trigger",
          "actions",
          "markers",
          "variables",
          "examples",
          "priority",
          "description",
          "metadata",
          "enabled",
          "tags"
        ],
        "type": "object"
      },
      "DraftSlice": {
        "deprecated": false,
        "description": "",
        "properties": {
          "from": {
            "description": "Start position of the part of the input value to be returned",
            "example": "3",
            "type": "string"
          },
          "to": {
            "description": "End position of the part of the input value to be returned",
            "example": "8",
            "type": "string"
          },
          "type": {
            "enum": [
              "slice"
            ],
            "type": "string"
          }
        },
        "required": [
          "from",
          "to",
          "type"
        ],
        "type": "object"
      },
      "DraftSliceJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "from": {
            "description": "Start position of the part of the input value to be returned",
            "example": "3",
            "type": "string"
          },
          "to": {
            "description": "End position of the part of the input value to be returned",
            "example": "8",
            "type": "string"
          },
          "type": {
            "enum": [
              "slice"
            ],
            "type": "string"
          }
        },
        "required": [
          "from",
          "to",
          "type"
        ],
        "type": "object"
      },
      "DraftString_": {
        "deprecated": false,
        "description": "",
        "properties": {
          "allowDigits": {
            "type": "boolean"
          },
          "allowLowercaseAlphabet": {
            "type": "boolean"
          },
          "allowPercentEncodedChars": {
            "type": "boolean"
          },
          "allowUppercaseAlphabet": {
            "type": "boolean"
          },
          "containing": {
            "type": [
              "string",
              "null"
            ]
          },
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "endingWith": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "specificCharacters": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startingWith": {
            "type": [
              "string",
              "null"
            ]
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "string"
            ],
            "type": "string"
          }
        },
        "required": [
          "allowLowercaseAlphabet",
          "allowUppercaseAlphabet",
          "allowDigits",
          "allowPercentEncodedChars",
          "specificCharacters",
          "startingWith",
          "endingWith",
          "containing",
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftString_Json": {
        "deprecated": false,
        "description": "",
        "properties": {
          "allowDigits": {
            "type": "boolean"
          },
          "allowLowercaseAlphabet": {
            "type": "boolean"
          },
          "allowPercentEncodedChars": {
            "type": "boolean"
          },
          "allowUppercaseAlphabet": {
            "type": "boolean"
          },
          "containing": {
            "type": [
              "string",
              "null"
            ]
          },
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "endingWith": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "specificCharacters": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startingWith": {
            "type": [
              "string",
              "null"
            ]
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "string"
            ],
            "type": "string"
          }
        },
        "required": [
          "allowLowercaseAlphabet",
          "allowUppercaseAlphabet",
          "allowDigits",
          "allowPercentEncodedChars",
          "specificCharacters",
          "startingWith",
          "endingWith",
          "containing",
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftTimeTrigger": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the time will be compared.",
            "enum": [
              "before",
              "after",
              "between",
              "notBetween"
            ],
            "example": "after",
            "type": "string"
          },
          "value": {
            "description": "A time (for after and before operators), or an array of two time (for between and notBetween operators).",
            "example": "08:27:09",
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator",
          "value"
        ],
        "type": "object"
      },
      "DraftTimeTriggerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the time will be compared.",
            "enum": [
              "before",
              "after",
              "between",
              "notBetween"
            ],
            "example": "after",
            "type": "string"
          },
          "value": {
            "description": "A time (for after and before operators), or an array of two time (for between and notBetween operators).",
            "example": "08:27:09",
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator",
          "value"
        ],
        "type": "object"
      },
      "DraftTrigger": {
        "deprecated": false,
        "description": "",
        "properties": {
          "date": {
            "description": "Rules will only be triggered if the current date matches all of these conditions.",
            "example": [
              {
                "operator": "equals",
                "value": "2023-01-01"
              },
              {
                "operator": "notEquals",
                "value": "2023-01-01"
              },
              {
                "operator": "between",
                "value": [
                  "2023-01-01",
                  "2023-01-02"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "2023-01-01",
                  "2023-01-02"
                ]
              },
              {
                "operator": "after",
                "value": "2023-01-01"
              },
              {
                "operator": "before",
                "value": "2023-01-31"
              },
              {
                "operator": "weekdays",
                "value": [
                  0,
                  1
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftDateTrigger"
            },
            "type": "array"
          },
          "datetime": {
            "description": "Rules will only be triggered if the current date and time match all of these conditions.",
            "example": [
              {
                "operator": "between",
                "value": [
                  "2023-01-01 08:00:00",
                  "2023-01-31 18:00:00"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "2023-01-01 08:00:00",
                  "2023-01-31 18:00:00"
                ]
              },
              {
                "operator": "after",
                "value": "2023-01-01 08:00:00"
              },
              {
                "operator": "before",
                "value": "2023-01-31 18:00:00"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftDateTimeTrigger"
            },
            "type": "array"
          },
          "excludeMethods": {
            "description": "Should the HTTP methods defined in methods be excluded from triggering the rule.",
            "type": "boolean"
          },
          "excludeResponseStatusCodes": {
            "description": "Should the response status codes defined in responseStatusCodes be excluded from triggering the rule.",
            "type": "boolean"
          },
          "ipAddress": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DraftAbstractIpTrigger"
              },
              {
                "type": "null"
              }
            ]
          },
          "methods": {
            "example": [
              "GET",
              "POST"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requestHeaders": {
            "items": {
              "$ref": "#/components/schemas/DraftHeader"
            },
            "type": "array"
          },
          "responseStatusCodes": {
            "description": "The backend response status code(s) that must trigger the rule",
            "example": [
              500,
              503
            ],
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "sampling": {
            "description": "The percentage of requests that must trigger the rule",
            "example": 47,
            "maximum": 100,
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "source": {
            "description": "The URL to redirect from.",
            "example": "/old-url",
            "type": "string"
          },
          "time": {
            "description": "Rules will only be triggered if the current time matches all of these conditions.",
            "example": [
              {
                "operator": "between",
                "value": [
                  "08:00",
                  "18:00"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "08:00",
                  "18:00"
                ]
              },
              {
                "operator": "after",
                "value": "08:00"
              },
              {
                "operator": "before",
                "value": "18:00"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftTimeTrigger"
            },
            "type": "array"
          }
        },
        "required": [
          "source",
          "methods",
          "excludeMethods",
          "requestHeaders",
          "responseStatusCodes",
          "excludeResponseStatusCodes",
          "ipAddress",
          "datetime",
          "date",
          "time",
          "sampling"
        ],
        "type": "object"
      },
      "DraftTriggerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "date": {
            "description": "Rules will only be triggered if the current date matches all of these conditions.",
            "example": [
              {
                "operator": "equals",
                "value": "2023-01-01"
              },
              {
                "operator": "notEquals",
                "value": "2023-01-01"
              },
              {
                "operator": "between",
                "value": [
                  "2023-01-01",
                  "2023-01-02"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "2023-01-01",
                  "2023-01-02"
                ]
              },
              {
                "operator": "after",
                "value": "2023-01-01"
              },
              {
                "operator": "before",
                "value": "2023-01-31"
              },
              {
                "operator": "weekdays",
                "value": [
                  0,
                  1
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftDateTriggerJson"
            },
            "type": "array"
          },
          "datetime": {
            "description": "Rules will only be triggered if the current date and time match all of these conditions.",
            "example": [
              {
                "operator": "between",
                "value": [
                  "2023-01-01 08:00:00",
                  "2023-01-31 18:00:00"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "2023-01-01 08:00:00",
                  "2023-01-31 18:00:00"
                ]
              },
              {
                "operator": "after",
                "value": "2023-01-01 08:00:00"
              },
              {
                "operator": "before",
                "value": "2023-01-31 18:00:00"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftDateTimeTriggerJson"
            },
            "type": "array"
          },
          "excludeMethods": {
            "description": "Should the HTTP methods defined in methods be excluded from triggering the rule.",
            "type": "boolean"
          },
          "excludeResponseStatusCodes": {
            "description": "Should the response status codes defined in responseStatusCodes be excluded from triggering the rule.",
            "type": "boolean"
          },
          "ipAddress": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DraftAbstractIpTriggerJson"
              },
              {
                "type": "null"
              }
            ]
          },
          "methods": {
            "example": [
              "GET",
              "POST"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requestHeaders": {
            "items": {
              "$ref": "#/components/schemas/DraftHeaderJson"
            },
            "type": "array"
          },
          "responseStatusCodes": {
            "description": "The backend response status code(s) that must trigger the rule",
            "example": [
              500,
              503
            ],
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "sampling": {
            "description": "The percentage of requests that must trigger the rule",
            "example": 47,
            "maximum": 100,
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "source": {
            "description": "The URL to redirect from.",
            "example": "/old-url",
            "type": "string"
          },
          "time": {
            "description": "Rules will only be triggered if the current time matches all of these conditions.",
            "example": [
              {
                "operator": "between",
                "value": [
                  "08:00",
                  "18:00"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "08:00",
                  "18:00"
                ]
              },
              {
                "operator": "after",
                "value": "08:00"
              },
              {
                "operator": "before",
                "value": "18:00"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftTimeTriggerJson"
            },
            "type": "array"
          }
        },
        "required": [
          "source",
          "methods",
          "excludeMethods",
          "requestHeaders",
          "responseStatusCodes",
          "excludeResponseStatusCodes",
          "ipAddress",
          "datetime",
          "date",
          "time",
          "sampling"
        ],
        "type": "object"
      },
      "DraftUnderscorize": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "underscorize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DraftUnderscorizeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "underscorize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DraftUppercase": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "uppercase"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DraftUppercaseJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "uppercase"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DraftUuid": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "uuid"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "DraftUuidJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DraftAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "uuid"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "Error": {
        "deprecated": false,
        "description": "A representation of common errors.",
        "properties": {
          "@context": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": true,
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "type": "object"
              }
            ],
            "readOnly": true
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "readOnly": true,
            "type": [
              "string",
              "null"
            ]
          },
          "detail": {
            "description": "A human-readable explanation specific to this occurrence of the problem.",
            "readOnly": true,
            "type": [
              "string",
              "null"
            ]
          },
          "instance": {
            "description": "A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.",
            "readOnly": true,
            "type": [
              "string",
              "null"
            ]
          },
          "status": {
            "default": 400,
            "example": 404,
            "type": "number"
          },
          "title": {
            "description": "A short, human-readable summary of the problem.",
            "readOnly": true,
            "type": [
              "string",
              "null"
            ]
          },
          "type": {
            "description": "A URI reference that identifies the problem type",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "@context",
          "@id",
          "@type",
          "title",
          "detail",
          "status",
          "instance",
          "type",
          "description"
        ],
        "type": "object"
      },
      "Ip": {
        "deprecated": false,
        "description": "",
        "properties": {
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "ipV4": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "IpJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ipV4": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Organization": {
        "deprecated": false,
        "description": "",
        "properties": {
          "@context": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": true,
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "type": "object"
              }
            ],
            "readOnly": true
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "projects": {
            "items": {
              "$ref": "#/components/schemas/OrganizationProject"
            },
            "type": "array"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "projects"
        ],
        "type": "object"
      },
      "OrganizationJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "projects": {
            "items": {
              "$ref": "#/components/schemas/OrganizationProjectJson"
            },
            "type": "array"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "projects"
        ],
        "type": "object"
      },
      "OrganizationProject": {
        "deprecated": false,
        "description": "",
        "properties": {
          "id": {
            "type": "string"
          },
          "metadata": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "plan",
          "metadata"
        ],
        "type": "object"
      },
      "OrganizationProjectJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "id": {
            "type": "string"
          },
          "metadata": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "plan",
          "metadata"
        ],
        "type": "object"
      },
      "Project": {
        "deprecated": false,
        "description": "",
        "properties": {
          "@context": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": true,
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "type": "object"
              }
            ],
            "readOnly": true
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "metadata": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "@context",
          "@id",
          "@type",
          "id",
          "name",
          "slug",
          "plan",
          "metadata"
        ],
        "type": "object"
      },
      "ProjectCreate": {
        "deprecated": false,
        "description": "",
        "properties": {
          "metadata": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ProjectCreateJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "metadata": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ProjectDomain": {
        "deprecated": false,
        "description": "",
        "properties": {
          "@context": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": true,
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "type": "object"
              }
            ],
            "readOnly": true
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "backendAddress": {
            "description": "The address of this backend, if there is one.",
            "type": [
              "string",
              "null"
            ]
          },
          "backendAllowInvalidCertificate": {
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "backendEnabled": {
            "default": false,
            "type": "boolean"
          },
          "backendUseSsl": {
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "dnsValid": {
            "type": "boolean"
          },
          "domain": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "records": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sslAutomatic": {
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "sslEnabled": {
            "default": true,
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "@id",
          "@type",
          "@context",
          "id",
          "domain",
          "backendEnabled",
          "backendAddress",
          "backendUseSsl",
          "backendAllowInvalidCertificate",
          "sslEnabled",
          "sslAutomatic",
          "dnsValid",
          "records"
        ],
        "type": "object"
      },
      "ProjectDomainCreate": {
        "deprecated": false,
        "description": "",
        "properties": {
          "backendAddress": {
            "description": "The address of this backend, if there is one.",
            "type": [
              "string",
              "null"
            ]
          },
          "backendAllowInvalidCertificate": {
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "backendEnabled": {
            "default": false,
            "type": "boolean"
          },
          "backendUseSsl": {
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "domain": {
            "type": "string"
          },
          "project": {
            "description": "An IRI reference to the project, of the form `/projects/{project_id}`.",
            "example": "/projects/{projectID}",
            "format": "iri-reference",
            "type": "string"
          },
          "sslAutomatic": {
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "sslEnabled": {
            "default": true,
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "project",
          "domain"
        ],
        "type": "object"
      },
      "ProjectDomainCreateJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "backendAddress": {
            "description": "The address of this backend, if there is one.",
            "type": [
              "string",
              "null"
            ]
          },
          "backendAllowInvalidCertificate": {
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "backendEnabled": {
            "default": false,
            "type": "boolean"
          },
          "backendUseSsl": {
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "domain": {
            "type": "string"
          },
          "project": {
            "description": "An IRI reference to the project, of the form `/projects/{project_id}`.",
            "example": "/projects/{projectID}",
            "format": "iri-reference",
            "type": "string"
          },
          "sslAutomatic": {
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "sslEnabled": {
            "default": true,
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "project",
          "domain"
        ],
        "type": "object"
      },
      "ProjectDomainJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "backendAddress": {
            "description": "The address of this backend, if there is one.",
            "type": [
              "string",
              "null"
            ]
          },
          "backendAllowInvalidCertificate": {
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "backendEnabled": {
            "default": false,
            "type": "boolean"
          },
          "backendUseSsl": {
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "dnsValid": {
            "type": "boolean"
          },
          "domain": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "records": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sslAutomatic": {
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "sslEnabled": {
            "default": true,
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "domain",
          "backendEnabled",
          "backendAddress",
          "backendUseSsl",
          "backendAllowInvalidCertificate",
          "sslEnabled",
          "sslAutomatic",
          "dnsValid",
          "records"
        ],
        "type": "object"
      },
      "ProjectJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "id": {
            "type": "string"
          },
          "metadata": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "maxLength": 255,
            "type": "string"
          },
          "plan": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "plan",
          "metadata"
        ],
        "type": "object"
      },
      "Redirection": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "description": "This description field is used to describe the rule and share knowledge with other users",
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "default": true,
            "description": "Set to \"false\" to disable this rule. Even once published, this rule will not be used by your website",
            "example": true,
            "type": [
              "boolean",
              "null"
            ]
          },
          "priority": {
            "description": "A rule with higher priority takes precedence over lower priorities, which means that the actions defined in the higher priority rule will override the similar actions defined in a lower priority one",
            "type": [
              "integer",
              "null"
            ]
          },
          "project": {
            "description": "An IRI reference to the project, of the form `/projects/{project_id}`.",
            "example": "/projects/{projectID}",
            "format": "iri-reference",
            "type": "string"
          },
          "source": {
            "description": "The URL to be redirected. This URL must start with `/`, `://`, `http://` or `https://`",
            "example": "/some-source-url",
            "type": "string"
          },
          "statusCode": {
            "description": "The status code to use for this redirection.",
            "enum": [
              301,
              302,
              307,
              308
            ],
            "type": "integer"
          },
          "tags": {
            "description": "Tags are useful to filter rules and retrieve them easily",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "target": {
            "description": "The redirection target URL. It must can be a relative URL (starting with `/`) or an absolute one (starting with `://`, `http://` or `https://`).",
            "example": "/the-target-url",
            "type": "string"
          }
        },
        "required": [
          "project",
          "source",
          "target",
          "statusCode"
        ],
        "type": "object"
      },
      "RedirectionJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "description": "This description field is used to describe the rule and share knowledge with other users",
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "default": true,
            "description": "Set to \"false\" to disable this rule. Even once published, this rule will not be used by your website",
            "example": true,
            "type": [
              "boolean",
              "null"
            ]
          },
          "priority": {
            "description": "A rule with higher priority takes precedence over lower priorities, which means that the actions defined in the higher priority rule will override the similar actions defined in a lower priority one",
            "type": [
              "integer",
              "null"
            ]
          },
          "project": {
            "description": "An IRI reference to the project, of the form `/projects/{project_id}`.",
            "example": "/projects/{projectID}",
            "format": "iri-reference",
            "type": "string"
          },
          "source": {
            "description": "The URL to be redirected. This URL must start with `/`, `://`, `http://` or `https://`",
            "example": "/some-source-url",
            "type": "string"
          },
          "statusCode": {
            "description": "The status code to use for this redirection.",
            "enum": [
              301,
              302,
              307,
              308
            ],
            "type": "integer"
          },
          "tags": {
            "description": "Tags are useful to filter rules and retrieve them easily",
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "target": {
            "description": "The redirection target URL. It must can be a relative URL (starting with `/`) or an absolute one (starting with `://`, `http://` or `https://`).",
            "example": "/the-target-url",
            "type": "string"
          }
        },
        "required": [
          "project",
          "source",
          "target",
          "statusCode"
        ],
        "type": "object"
      },
      "RedirectionRead": {
        "deprecated": false,
        "description": "",
        "properties": {
          "@context": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": true,
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "type": "object"
              }
            ],
            "readOnly": true
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RedirectionReadJson": {
        "deprecated": false,
        "description": "",
        "type": "object"
      },
      "RuleRead": {
        "deprecated": false,
        "description": "",
        "properties": {
          "@context": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": true,
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "type": "object"
              }
            ],
            "readOnly": true
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "actions": {
            "description": "Each `Action` must be an object with a `type` property, and some other properties according to its type:\n\n* `configuration`:\n    * `logEnabled` (bool, required)\n    * `reset` (bool, required)\n * `customHtml`:\n    * `value` (string, required)\n    * `location` (string, required). One of `headStart`, `headEnd`, `bodyStart`, `bodyEnd`\n* `customBody`:\n    * `value` (string, required)\n    * `contentType` (string, required). Content-type header to use for the response.\n* `customStatus` (previously `gone`):\n    * `statusCode` (int, required). A valid status code between 200 and 511 ([see the official documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses) for more information)\n* `header`:\n    * `name` (string, required)\n    * `value` (string, required)\n    * `mode` (string, required). One of `override`, `default`, `replace`, `append`, `add`\n    * `override` (bool, deprecated). Use the `mode` property instead.\n* `meta`:\n    * `type` (string, required). One of `title`, `description`, `keywords`, `author`, `og:title`, `og:description`, `og:type`, `og:image`, `og:url`, `og:locale`, `og:site_name`\n    * `value` (string, required)\n    * `replace` (bool, required)\n* `redirection`:\n    * `location` (string, required)\n    * `statusCode` (int, required). One of `301`, `302`, `307`, `308`\n * `robotsTxt`:\n    * `content` (string, required)\n* `sitemap`:\n    * `name` (string)\n    * `content` (string, required)\n* `structuredData`:\n    * `value` (string, required)",
            "example": [
              {
                "location": "headStart",
                "type": "customHtml",
                "value": "<!-- Hello -->"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractAction"
            },
            "minItems": 1,
            "type": "array"
          },
          "description": {
            "description": "This description field is used to describe the rule and share knowledge with other users",
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "default": true,
            "description": "Set to `false` to disable this rule",
            "example": true,
            "type": "boolean"
          },
          "examples": {
            "description": "Examples are useful to test your rule. They are not used in production.",
            "items": {
              "$ref": "#/components/schemas/RuleReadExample"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "markers": {
            "description": "Each `Marker` must be an object with a `type` property, and some other properties according to its type:\n* `anything`: No options\n * `custom`:\n    * `regex` (string, required)\n* `enum`\n    * `values` (array of string, required)\n* `date`: No options\n* `datetime`: No options\n * `integer`:\n    * `minimum` (int, required)\n    * `maximum` (int, required)\n * `string`:\n    * `allowLowercaseAlphabet` (bool)\n    * `allowUppercaseAlphabet` (bool)\n    * `allowDigits` (bool)\n    * `allowPercentEncodedChars` (bool)\n    * `specificCharacters` (array of string of length 1)\n    * `startingWith` (string)\n    * `endingWith` (string)\n    * `containing` (string)\n* `uuid`: No options",
            "example": [
              {
                "name": "someMarkerName",
                "transformers": [
                  {
                    "from": "0",
                    "to": "2",
                    "type": "slice"
                  }
                ],
                "type": "enum",
                "values": [
                  "dog",
                  "cat"
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractMarker"
            },
            "type": "array"
          },
          "metadata": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "priority": {
            "description": "A rule with higher priority takes precedence over lower priorities, which means that the actions defined in the higher priority rule will override the similar actions defined in a lower priority one",
            "type": "integer"
          },
          "tags": {
            "description": "Tags are useful to filter rules and retrieve them easily",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trigger": {
            "$ref": "#/components/schemas/RuleReadTrigger"
          },
          "variables": {
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractVariable"
            },
            "type": "array"
          }
        },
        "required": [
          "@id",
          "@type",
          "@context",
          "id",
          "trigger",
          "actions",
          "markers",
          "variables",
          "examples",
          "priority",
          "description",
          "metadata",
          "enabled",
          "tags"
        ],
        "type": "object"
      },
      "RuleReadAbstractAction": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "configuration": "#/components/schemas/RuleReadActionConfiguration",
            "customBody": "#/components/schemas/RuleReadActionCustomBody",
            "customHtml": "#/components/schemas/RuleReadActionCustomHtml",
            "custom_status": "#/components/schemas/RuleReadActionCustomStatus",
            "gone": "#/components/schemas/RuleReadActionCustomStatus",
            "header": "#/components/schemas/RuleReadActionResponseHeader",
            "meta": "#/components/schemas/RuleReadActionSeoOverride",
            "redirection": "#/components/schemas/RuleReadActionRedirection",
            "robotsTxt": "#/components/schemas/RuleReadActionRobotsTXT",
            "sitemap": "#/components/schemas/RuleReadActionSitemap",
            "structuredData": "#/components/schemas/RuleReadActionStructuredData"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleReadActionConfiguration"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionCustomHtml"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionCustomBody"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionCustomStatus"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionResponseHeader"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionRedirection"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionRobotsTXT"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionSeoOverride"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionSitemap"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionStructuredData"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleReadAbstractActionJson": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "configuration": "#/components/schemas/RuleReadActionConfigurationJson",
            "customBody": "#/components/schemas/RuleReadActionCustomBodyJson",
            "customHtml": "#/components/schemas/RuleReadActionCustomHtmlJson",
            "custom_status": "#/components/schemas/RuleReadActionCustomStatusJson",
            "gone": "#/components/schemas/RuleReadActionCustomStatusJson",
            "header": "#/components/schemas/RuleReadActionResponseHeaderJson",
            "meta": "#/components/schemas/RuleReadActionSeoOverrideJson",
            "redirection": "#/components/schemas/RuleReadActionRedirectionJson",
            "robotsTxt": "#/components/schemas/RuleReadActionRobotsTXTJson",
            "sitemap": "#/components/schemas/RuleReadActionSitemapJson",
            "structuredData": "#/components/schemas/RuleReadActionStructuredDataJson"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleReadActionConfigurationJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionCustomHtmlJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionCustomBodyJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionCustomStatusJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionResponseHeaderJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionRedirectionJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionRobotsTXTJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionSeoOverrideJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionSitemapJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadActionStructuredDataJson"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleReadAbstractIpTrigger": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "equals": "#/components/schemas/RuleReadIpTriggerEquals",
            "greaterThan": "#/components/schemas/RuleReadIpTriggerGreaterThan",
            "greaterThanOrEquals": "#/components/schemas/RuleReadIpTriggerGreaterThanOrEquals",
            "inRange": "#/components/schemas/RuleReadIpTriggerInRange",
            "lessThan": "#/components/schemas/RuleReadIpTriggerLessThan",
            "lessThanOrEquals": "#/components/schemas/RuleReadIpTriggerLessThanOrEquals",
            "notEquals": "#/components/schemas/RuleReadIpTriggerNotEquals",
            "notInRange": "#/components/schemas/RuleReadIpTriggerNotInRange",
            "notOneOf": "#/components/schemas/RuleReadIpTriggerNotOneOf",
            "oneOf": "#/components/schemas/RuleReadIpTriggerOneOf"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerEquals"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerNotEquals"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerOneOf"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerNotOneOf"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerGreaterThan"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerGreaterThanOrEquals"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerLessThan"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerLessThanOrEquals"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerInRange"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerNotInRange"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleReadAbstractIpTriggerJson": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "equals": "#/components/schemas/RuleReadIpTriggerEqualsJson",
            "greaterThan": "#/components/schemas/RuleReadIpTriggerGreaterThanJson",
            "greaterThanOrEquals": "#/components/schemas/RuleReadIpTriggerGreaterThanOrEqualsJson",
            "inRange": "#/components/schemas/RuleReadIpTriggerInRangeJson",
            "lessThan": "#/components/schemas/RuleReadIpTriggerLessThanJson",
            "lessThanOrEquals": "#/components/schemas/RuleReadIpTriggerLessThanOrEqualsJson",
            "notEquals": "#/components/schemas/RuleReadIpTriggerNotEqualsJson",
            "notInRange": "#/components/schemas/RuleReadIpTriggerNotInRangeJson",
            "notOneOf": "#/components/schemas/RuleReadIpTriggerNotOneOfJson",
            "oneOf": "#/components/schemas/RuleReadIpTriggerOneOfJson"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerEqualsJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerNotEqualsJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerOneOfJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerNotOneOfJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerGreaterThanJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerGreaterThanOrEqualsJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerLessThanJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerLessThanOrEqualsJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerInRangeJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadIpTriggerNotInRangeJson"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleReadAbstractMarker": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "anything": "#/components/schemas/RuleReadAnything",
            "custom": "#/components/schemas/RuleReadCustom",
            "date": "#/components/schemas/RuleReadDate",
            "datetime": "#/components/schemas/RuleReadDatetime",
            "enum": "#/components/schemas/RuleReadEnum",
            "integer": "#/components/schemas/RuleReadInteger",
            "string": "#/components/schemas/RuleReadString_",
            "uuid": "#/components/schemas/RuleReadUuid"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleReadAnything"
          },
          {
            "$ref": "#/components/schemas/RuleReadCustom"
          },
          {
            "$ref": "#/components/schemas/RuleReadDate"
          },
          {
            "$ref": "#/components/schemas/RuleReadDatetime"
          },
          {
            "$ref": "#/components/schemas/RuleReadEnum"
          },
          {
            "$ref": "#/components/schemas/RuleReadInteger"
          },
          {
            "$ref": "#/components/schemas/RuleReadString_"
          },
          {
            "$ref": "#/components/schemas/RuleReadUuid"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleReadAbstractMarkerJson": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "anything": "#/components/schemas/RuleReadAnythingJson",
            "custom": "#/components/schemas/RuleReadCustomJson",
            "date": "#/components/schemas/RuleReadDateJson",
            "datetime": "#/components/schemas/RuleReadDatetimeJson",
            "enum": "#/components/schemas/RuleReadEnumJson",
            "integer": "#/components/schemas/RuleReadIntegerJson",
            "string": "#/components/schemas/RuleReadString_Json",
            "uuid": "#/components/schemas/RuleReadUuidJson"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleReadAnythingJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadCustomJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadDateJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadDatetimeJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadEnumJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadIntegerJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadString_Json"
          },
          {
            "$ref": "#/components/schemas/RuleReadUuidJson"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleReadAbstractTransformer": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "camelize": "#/components/schemas/RuleReadCamelize",
            "dasherize": "#/components/schemas/RuleReadDasherize",
            "lowercase": "#/components/schemas/RuleReadLowercase",
            "replace": "#/components/schemas/RuleReadReplace",
            "slice": "#/components/schemas/RuleReadSlice",
            "underscorize": "#/components/schemas/RuleReadUnderscorize",
            "uppercase": "#/components/schemas/RuleReadUppercase"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleReadCamelize"
          },
          {
            "$ref": "#/components/schemas/RuleReadDasherize"
          },
          {
            "$ref": "#/components/schemas/RuleReadLowercase"
          },
          {
            "$ref": "#/components/schemas/RuleReadReplace"
          },
          {
            "$ref": "#/components/schemas/RuleReadSlice"
          },
          {
            "$ref": "#/components/schemas/RuleReadUnderscorize"
          },
          {
            "$ref": "#/components/schemas/RuleReadUppercase"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleReadAbstractTransformerJson": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "camelize": "#/components/schemas/RuleReadCamelizeJson",
            "dasherize": "#/components/schemas/RuleReadDasherizeJson",
            "lowercase": "#/components/schemas/RuleReadLowercaseJson",
            "replace": "#/components/schemas/RuleReadReplaceJson",
            "slice": "#/components/schemas/RuleReadSliceJson",
            "underscorize": "#/components/schemas/RuleReadUnderscorizeJson",
            "uppercase": "#/components/schemas/RuleReadUppercaseJson"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleReadCamelizeJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadDasherizeJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadLowercaseJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadReplaceJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadSliceJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadUnderscorizeJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadUppercaseJson"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleReadAbstractVariable": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "marker": "#/components/schemas/RuleReadMarker",
            "requestHeader": "#/components/schemas/RuleReadRequestHeader",
            "requestHost": "#/components/schemas/RuleReadRequestHost",
            "requestMethod": "#/components/schemas/RuleReadRequestMethod",
            "requestPath": "#/components/schemas/RuleReadRequestPath",
            "requestRemoteAddress": "#/components/schemas/RuleReadRequestRemoteAddress",
            "requestScheme": "#/components/schemas/RuleReadRequestScheme",
            "requestTime": "#/components/schemas/RuleReadRequestTime"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleReadMarker"
          },
          {
            "$ref": "#/components/schemas/RuleReadRequestHeader"
          },
          {
            "$ref": "#/components/schemas/RuleReadRequestHost"
          },
          {
            "$ref": "#/components/schemas/RuleReadRequestMethod"
          },
          {
            "$ref": "#/components/schemas/RuleReadRequestPath"
          },
          {
            "$ref": "#/components/schemas/RuleReadRequestRemoteAddress"
          },
          {
            "$ref": "#/components/schemas/RuleReadRequestScheme"
          },
          {
            "$ref": "#/components/schemas/RuleReadRequestTime"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleReadAbstractVariableJson": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "marker": "#/components/schemas/RuleReadMarkerJson",
            "requestHeader": "#/components/schemas/RuleReadRequestHeaderJson",
            "requestHost": "#/components/schemas/RuleReadRequestHostJson",
            "requestMethod": "#/components/schemas/RuleReadRequestMethodJson",
            "requestPath": "#/components/schemas/RuleReadRequestPathJson",
            "requestRemoteAddress": "#/components/schemas/RuleReadRequestRemoteAddressJson",
            "requestScheme": "#/components/schemas/RuleReadRequestSchemeJson",
            "requestTime": "#/components/schemas/RuleReadRequestTimeJson"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleReadMarkerJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadRequestHeaderJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadRequestHostJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadRequestMethodJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadRequestPathJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadRequestRemoteAddressJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadRequestSchemeJson"
          },
          {
            "$ref": "#/components/schemas/RuleReadRequestTimeJson"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleReadActionConfiguration": {
        "deprecated": false,
        "description": "",
        "properties": {
          "logEnabled": {
            "type": "boolean"
          },
          "reset": {
            "type": "boolean"
          },
          "stop": {
            "type": "boolean"
          },
          "type": {
            "enum": [
              "configuration"
            ],
            "type": "string"
          }
        },
        "required": [
          "logEnabled",
          "reset",
          "stop",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionConfigurationJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "logEnabled": {
            "type": "boolean"
          },
          "reset": {
            "type": "boolean"
          },
          "stop": {
            "type": "boolean"
          },
          "type": {
            "enum": [
              "configuration"
            ],
            "type": "string"
          }
        },
        "required": [
          "logEnabled",
          "reset",
          "stop",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionCustomBody": {
        "deprecated": false,
        "description": "",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "type": {
            "enum": [
              "customBody"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "contentType",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionCustomBodyJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "type": {
            "enum": [
              "customBody"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "contentType",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionCustomHtml": {
        "deprecated": false,
        "description": "",
        "properties": {
          "location": {
            "enum": [
              "headStart",
              "headEnd",
              "bodyStart",
              "bodyEnd"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "customHtml"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "location",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionCustomHtmlJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "location": {
            "enum": [
              "headStart",
              "headEnd",
              "bodyStart",
              "bodyEnd"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "customHtml"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "location",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionCustomStatus": {
        "deprecated": false,
        "description": "",
        "properties": {
          "statusCode": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "custom_status",
              "gone"
            ],
            "type": "string"
          }
        },
        "required": [
          "statusCode",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionCustomStatusJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "statusCode": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "custom_status",
              "gone"
            ],
            "type": "string"
          }
        },
        "required": [
          "statusCode",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionRedirection": {
        "deprecated": false,
        "description": "",
        "properties": {
          "location": {
            "type": "string"
          },
          "statusCode": {
            "enum": [
              301,
              302,
              307,
              308
            ],
            "type": "integer"
          },
          "type": {
            "enum": [
              "redirection"
            ],
            "type": "string"
          }
        },
        "required": [
          "location",
          "statusCode",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionRedirectionJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "location": {
            "type": "string"
          },
          "statusCode": {
            "enum": [
              301,
              302,
              307,
              308
            ],
            "type": "integer"
          },
          "type": {
            "enum": [
              "redirection"
            ],
            "type": "string"
          }
        },
        "required": [
          "location",
          "statusCode",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionResponseHeader": {
        "deprecated": false,
        "description": "",
        "properties": {
          "mode": {
            "enum": [
              "override",
              "default",
              "replace",
              "add",
              "remove"
            ],
            "example": "default",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "override": {
            "deprecated": true,
            "type": [
              "boolean",
              "null"
            ]
          },
          "type": {
            "enum": [
              "header"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value",
          "mode",
          "override",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionResponseHeaderJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "mode": {
            "enum": [
              "override",
              "default",
              "replace",
              "add",
              "remove"
            ],
            "example": "default",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "override": {
            "deprecated": true,
            "type": [
              "boolean",
              "null"
            ]
          },
          "type": {
            "enum": [
              "header"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value",
          "mode",
          "override",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionRobotsTXT": {
        "deprecated": false,
        "description": "",
        "properties": {
          "content": {
            "type": "string"
          },
          "type": {
            "enum": [
              "robotsTxt"
            ],
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionRobotsTXTJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "content": {
            "type": "string"
          },
          "type": {
            "enum": [
              "robotsTxt"
            ],
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionSeoOverride": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "enum": [
              "title",
              "description",
              "keywords",
              "author",
              "og:title",
              "og:description",
              "og:type",
              "og:image",
              "og:url",
              "og:locale",
              "og:site_name"
            ],
            "type": "string"
          },
          "replace": {
            "type": "boolean"
          },
          "type": {
            "enum": [
              "meta"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value",
          "replace",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionSeoOverrideJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "enum": [
              "title",
              "description",
              "keywords",
              "author",
              "og:title",
              "og:description",
              "og:type",
              "og:image",
              "og:url",
              "og:locale",
              "og:site_name"
            ],
            "type": "string"
          },
          "replace": {
            "type": "boolean"
          },
          "type": {
            "enum": [
              "meta"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value",
          "replace",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionSitemap": {
        "deprecated": false,
        "description": "",
        "properties": {
          "content": {
            "type": "string"
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": {
            "enum": [
              "sitemap"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "content",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionSitemapJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "content": {
            "type": "string"
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": {
            "enum": [
              "sitemap"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "content",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionStructuredData": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "structuredData"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "type"
        ],
        "type": "object"
      },
      "RuleReadActionStructuredDataJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "structuredData"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "type"
        ],
        "type": "object"
      },
      "RuleReadAnything": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "anything"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadAnythingJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "anything"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadCamelize": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "camelize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleReadCamelizeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "camelize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleReadCustom": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "regex": {
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "custom"
            ],
            "type": "string"
          }
        },
        "required": [
          "regex",
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadCustomJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "regex": {
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "custom"
            ],
            "type": "string"
          }
        },
        "required": [
          "regex",
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadDasherize": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "dasherize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleReadDasherizeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "dasherize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleReadDate": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "date"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadDateJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "date"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadDateTimeTrigger": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the date and time will be compared.",
            "enum": [
              "before",
              "after",
              "between",
              "notBetween"
            ],
            "example": "after",
            "type": "string"
          },
          "value": {
            "description": "A datetime (for after and before operators), or an array of two datetimes (for between and notBetween operators).",
            "example": [
              "2021-01-01 08:27:09",
              "2021-01-31 19:15:00"
            ],
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator",
          "value"
        ],
        "type": "object"
      },
      "RuleReadDateTimeTriggerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the date and time will be compared.",
            "enum": [
              "before",
              "after",
              "between",
              "notBetween"
            ],
            "example": "after",
            "type": "string"
          },
          "value": {
            "description": "A datetime (for after and before operators), or an array of two datetimes (for between and notBetween operators).",
            "example": [
              "2021-01-01 08:27:09",
              "2021-01-31 19:15:00"
            ],
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator",
          "value"
        ],
        "type": "object"
      },
      "RuleReadDateTrigger": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the date will be compared.",
            "enum": [
              "equals",
              "notEquals",
              "before",
              "after",
              "between",
              "notBetween",
              "weekdays"
            ],
            "example": "equals",
            "type": "string"
          },
          "value": {
            "description": "A date (for equals, notEquals, after or before operators), an array of two dates (for between or notBetween operators), or an array of integers (for weekdays operator, 0 for Sunday, 1 for Monday, and so on).",
            "example": "2023-03-07",
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator",
          "value"
        ],
        "type": "object"
      },
      "RuleReadDateTriggerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the date will be compared.",
            "enum": [
              "equals",
              "notEquals",
              "before",
              "after",
              "between",
              "notBetween",
              "weekdays"
            ],
            "example": "equals",
            "type": "string"
          },
          "value": {
            "description": "A date (for equals, notEquals, after or before operators), an array of two dates (for between or notBetween operators), or an array of integers (for weekdays operator, 0 for Sunday, 1 for Monday, and so on).",
            "example": "2023-03-07",
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator",
          "value"
        ],
        "type": "object"
      },
      "RuleReadDatetime": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "datetime"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadDatetimeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "datetime"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadEnum": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "enum"
            ],
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "values",
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadEnumJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "enum"
            ],
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "values",
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadExample": {
        "deprecated": false,
        "description": "",
        "properties": {
          "datetime": {
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "headers": {
            "items": {
              "$ref": "#/components/schemas/RuleReadHeader1"
            },
            "type": "array"
          },
          "ipAddress": {
            "type": [
              "string",
              "null"
            ]
          },
          "method": {
            "type": [
              "string",
              "null"
            ]
          },
          "mustMatch": {
            "type": "boolean"
          },
          "responseStatusCode": {
            "maximum": 599,
            "minimum": 100,
            "type": [
              "integer",
              "null"
            ]
          },
          "url": {
            "pattern": "^(.*(^(/|://|https?://).*).*)$",
            "type": "string"
          }
        },
        "required": [
          "mustMatch",
          "url",
          "method",
          "responseStatusCode",
          "headers",
          "ipAddress",
          "datetime"
        ],
        "type": "object"
      },
      "RuleReadExampleJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "datetime": {
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "headers": {
            "items": {
              "$ref": "#/components/schemas/RuleReadHeader1Json"
            },
            "type": "array"
          },
          "ipAddress": {
            "type": [
              "string",
              "null"
            ]
          },
          "method": {
            "type": [
              "string",
              "null"
            ]
          },
          "mustMatch": {
            "type": "boolean"
          },
          "responseStatusCode": {
            "maximum": 599,
            "minimum": 100,
            "type": [
              "integer",
              "null"
            ]
          },
          "url": {
            "pattern": "^(.*(^(/|://|https?://).*).*)$",
            "type": "string"
          }
        },
        "required": [
          "mustMatch",
          "url",
          "method",
          "responseStatusCode",
          "headers",
          "ipAddress",
          "datetime"
        ],
        "type": "object"
      },
      "RuleReadHeader": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The operator with which the value will be compared",
            "example": "Accept",
            "type": "string"
          },
          "operator": {
            "description": "The name of the request HTTP header",
            "enum": [
              "isDefined",
              "isNotDefined",
              "equals",
              "isNotEqualTo",
              "contains",
              "doesNotContain",
              "endsWith",
              "startsWith",
              "matchesRegex"
            ],
            "example": "isNotEqualTo",
            "type": "string"
          },
          "value": {
            "example": "application/json",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "name",
          "operator",
          "value"
        ],
        "type": "object"
      },
      "RuleReadHeader1": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "RuleReadHeader1Json": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "RuleReadHeaderJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The operator with which the value will be compared",
            "example": "Accept",
            "type": "string"
          },
          "operator": {
            "description": "The name of the request HTTP header",
            "enum": [
              "isDefined",
              "isNotDefined",
              "equals",
              "isNotEqualTo",
              "contains",
              "doesNotContain",
              "endsWith",
              "startsWith",
              "matchesRegex"
            ],
            "example": "isNotEqualTo",
            "type": "string"
          },
          "value": {
            "example": "application/json",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "name",
          "operator",
          "value"
        ],
        "type": "object"
      },
      "RuleReadInteger": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "maximum": {
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "minimum": {
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "integer"
            ],
            "type": "string"
          }
        },
        "required": [
          "minimum",
          "maximum",
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIntegerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "maximum": {
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "minimum": {
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "integer"
            ],
            "type": "string"
          }
        },
        "required": [
          "minimum",
          "maximum",
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerEquals": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The value of the request IP address to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "equals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerEqualsJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The value of the request IP address to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "equals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerGreaterThan": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum (excluded) value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "greaterThan"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerGreaterThanJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum (excluded) value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "greaterThan"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerGreaterThanOrEquals": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "greaterThanOrEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerGreaterThanOrEqualsJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "greaterThanOrEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerInRange": {
        "deprecated": false,
        "description": "",
        "properties": {
          "end": {
            "description": "The upper (included) bound of the IP range to which the request IP address must belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "start": {
            "description": "The lower (included) bound of the IP range to which the request IP address must belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "inRange"
            ],
            "type": "string"
          }
        },
        "required": [
          "start",
          "end",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerInRangeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "end": {
            "description": "The upper (included) bound of the IP range to which the request IP address must belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "start": {
            "description": "The lower (included) bound of the IP range to which the request IP address must belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "inRange"
            ],
            "type": "string"
          }
        },
        "required": [
          "start",
          "end",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerLessThan": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum (excluded) value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "lessThan"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerLessThanJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum (excluded) value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "lessThan"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerLessThanOrEquals": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The maximum value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "lessThanOrEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerLessThanOrEqualsJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The maximum value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "lessThanOrEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerNotEquals": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The value of the request IP address must be different to this value to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "notEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerNotEqualsJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The value of the request IP address must be different to this value to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "notEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerNotInRange": {
        "deprecated": false,
        "description": "",
        "properties": {
          "end": {
            "description": "The upper (included) bound of the IP range to which the request IP address must not belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "start": {
            "description": "The lower (included) bound of the IP range to which the request IP address must not belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "notInRange"
            ],
            "type": "string"
          }
        },
        "required": [
          "start",
          "end",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerNotInRangeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "end": {
            "description": "The upper (included) bound of the IP range to which the request IP address must not belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "start": {
            "description": "The lower (included) bound of the IP range to which the request IP address must not belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "notInRange"
            ],
            "type": "string"
          }
        },
        "required": [
          "start",
          "end",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerNotOneOf": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ips": {
            "description": "The list the request IP address must be one of to trigger this rule",
            "items": {
              "example": "1.2.3.4",
              "format": "ipv4",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "type": {
            "enum": [
              "notOneOf"
            ],
            "type": "string"
          }
        },
        "required": [
          "ips",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerNotOneOfJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ips": {
            "description": "The list the request IP address must be one of to trigger this rule",
            "items": {
              "example": "1.2.3.4",
              "format": "ipv4",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "type": {
            "enum": [
              "notOneOf"
            ],
            "type": "string"
          }
        },
        "required": [
          "ips",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerOneOf": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ips": {
            "description": "The list the request IP address must be one of to trigger this rule",
            "items": {
              "example": "1.2.3.4",
              "format": "ipv4",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "type": {
            "enum": [
              "oneOf"
            ],
            "type": "string"
          }
        },
        "required": [
          "ips",
          "type"
        ],
        "type": "object"
      },
      "RuleReadIpTriggerOneOfJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ips": {
            "description": "The list the request IP address must be one of to trigger this rule",
            "items": {
              "example": "1.2.3.4",
              "format": "ipv4",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "type": {
            "enum": [
              "oneOf"
            ],
            "type": "string"
          }
        },
        "required": [
          "ips",
          "type"
        ],
        "type": "object"
      },
      "RuleReadJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "actions": {
            "description": "Each `Action` must be an object with a `type` property, and some other properties according to its type:\n\n* `configuration`:\n    * `logEnabled` (bool, required)\n    * `reset` (bool, required)\n * `customHtml`:\n    * `value` (string, required)\n    * `location` (string, required). One of `headStart`, `headEnd`, `bodyStart`, `bodyEnd`\n* `customBody`:\n    * `value` (string, required)\n    * `contentType` (string, required). Content-type header to use for the response.\n* `customStatus` (previously `gone`):\n    * `statusCode` (int, required). A valid status code between 200 and 511 ([see the official documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses) for more information)\n* `header`:\n    * `name` (string, required)\n    * `value` (string, required)\n    * `mode` (string, required). One of `override`, `default`, `replace`, `append`, `add`\n    * `override` (bool, deprecated). Use the `mode` property instead.\n* `meta`:\n    * `type` (string, required). One of `title`, `description`, `keywords`, `author`, `og:title`, `og:description`, `og:type`, `og:image`, `og:url`, `og:locale`, `og:site_name`\n    * `value` (string, required)\n    * `replace` (bool, required)\n* `redirection`:\n    * `location` (string, required)\n    * `statusCode` (int, required). One of `301`, `302`, `307`, `308`\n * `robotsTxt`:\n    * `content` (string, required)\n* `sitemap`:\n    * `name` (string)\n    * `content` (string, required)\n* `structuredData`:\n    * `value` (string, required)",
            "example": [
              {
                "location": "headStart",
                "type": "customHtml",
                "value": "<!-- Hello -->"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractActionJson"
            },
            "minItems": 1,
            "type": "array"
          },
          "description": {
            "description": "This description field is used to describe the rule and share knowledge with other users",
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "default": true,
            "description": "Set to `false` to disable this rule",
            "example": true,
            "type": "boolean"
          },
          "examples": {
            "description": "Examples are useful to test your rule. They are not used in production.",
            "items": {
              "$ref": "#/components/schemas/RuleReadExampleJson"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "markers": {
            "description": "Each `Marker` must be an object with a `type` property, and some other properties according to its type:\n* `anything`: No options\n * `custom`:\n    * `regex` (string, required)\n* `enum`\n    * `values` (array of string, required)\n* `date`: No options\n* `datetime`: No options\n * `integer`:\n    * `minimum` (int, required)\n    * `maximum` (int, required)\n * `string`:\n    * `allowLowercaseAlphabet` (bool)\n    * `allowUppercaseAlphabet` (bool)\n    * `allowDigits` (bool)\n    * `allowPercentEncodedChars` (bool)\n    * `specificCharacters` (array of string of length 1)\n    * `startingWith` (string)\n    * `endingWith` (string)\n    * `containing` (string)\n* `uuid`: No options",
            "example": [
              {
                "name": "someMarkerName",
                "transformers": [
                  {
                    "from": "0",
                    "to": "2",
                    "type": "slice"
                  }
                ],
                "type": "enum",
                "values": [
                  "dog",
                  "cat"
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractMarkerJson"
            },
            "type": "array"
          },
          "metadata": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "priority": {
            "description": "A rule with higher priority takes precedence over lower priorities, which means that the actions defined in the higher priority rule will override the similar actions defined in a lower priority one",
            "type": "integer"
          },
          "tags": {
            "description": "Tags are useful to filter rules and retrieve them easily",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trigger": {
            "$ref": "#/components/schemas/RuleReadTriggerJson"
          },
          "variables": {
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractVariableJson"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "trigger",
          "actions",
          "markers",
          "variables",
          "examples",
          "priority",
          "description",
          "metadata",
          "enabled",
          "tags"
        ],
        "type": "object"
      },
      "RuleReadLowercase": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "lowercase"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleReadLowercaseJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "lowercase"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleReadMarker": {
        "deprecated": false,
        "description": "",
        "properties": {
          "marker": {
            "description": "The name of the trigger marker to associate with this variable",
            "example": "markerName",
            "type": "string"
          },
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "marker"
            ],
            "type": "string"
          }
        },
        "required": [
          "marker",
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadMarkerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "marker": {
            "description": "The name of the trigger marker to associate with this variable",
            "example": "markerName",
            "type": "string"
          },
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "marker"
            ],
            "type": "string"
          }
        },
        "required": [
          "marker",
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadReplace": {
        "deprecated": false,
        "description": "",
        "properties": {
          "something": {
            "description": "The value to be replaced",
            "example": "foo",
            "type": "string"
          },
          "type": {
            "enum": [
              "replace"
            ],
            "type": "string"
          },
          "with": {
            "description": "The value to use as replacement",
            "example": "bar",
            "type": "string"
          }
        },
        "required": [
          "something",
          "with",
          "type"
        ],
        "type": "object"
      },
      "RuleReadReplaceJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "something": {
            "description": "The value to be replaced",
            "example": "foo",
            "type": "string"
          },
          "type": {
            "enum": [
              "replace"
            ],
            "type": "string"
          },
          "with": {
            "description": "The value to use as replacement",
            "example": "bar",
            "type": "string"
          }
        },
        "required": [
          "something",
          "with",
          "type"
        ],
        "type": "object"
      },
      "RuleReadRequestHeader": {
        "deprecated": false,
        "description": "",
        "properties": {
          "defaultValue": {
            "type": [
              "string",
              "null"
            ]
          },
          "headerName": {
            "type": "string"
          },
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestHeader"
            ],
            "type": "string"
          }
        },
        "required": [
          "headerName",
          "defaultValue",
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadRequestHeaderJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "defaultValue": {
            "type": [
              "string",
              "null"
            ]
          },
          "headerName": {
            "type": "string"
          },
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestHeader"
            ],
            "type": "string"
          }
        },
        "required": [
          "headerName",
          "defaultValue",
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadRequestHost": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestHost"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadRequestHostJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestHost"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadRequestMethod": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestMethod"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadRequestMethodJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestMethod"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadRequestPath": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestPath"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadRequestPathJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestPath"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadRequestRemoteAddress": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestRemoteAddress"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadRequestRemoteAddressJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestRemoteAddress"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadRequestScheme": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestScheme"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadRequestSchemeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestScheme"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadRequestTime": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestTime"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadRequestTimeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestTime"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadSlice": {
        "deprecated": false,
        "description": "",
        "properties": {
          "from": {
            "description": "Start position of the part of the input value to be returned",
            "example": "3",
            "type": "string"
          },
          "to": {
            "description": "End position of the part of the input value to be returned",
            "example": "8",
            "type": "string"
          },
          "type": {
            "enum": [
              "slice"
            ],
            "type": "string"
          }
        },
        "required": [
          "from",
          "to",
          "type"
        ],
        "type": "object"
      },
      "RuleReadSliceJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "from": {
            "description": "Start position of the part of the input value to be returned",
            "example": "3",
            "type": "string"
          },
          "to": {
            "description": "End position of the part of the input value to be returned",
            "example": "8",
            "type": "string"
          },
          "type": {
            "enum": [
              "slice"
            ],
            "type": "string"
          }
        },
        "required": [
          "from",
          "to",
          "type"
        ],
        "type": "object"
      },
      "RuleReadString_": {
        "deprecated": false,
        "description": "",
        "properties": {
          "allowDigits": {
            "type": "boolean"
          },
          "allowLowercaseAlphabet": {
            "type": "boolean"
          },
          "allowPercentEncodedChars": {
            "type": "boolean"
          },
          "allowUppercaseAlphabet": {
            "type": "boolean"
          },
          "containing": {
            "type": [
              "string",
              "null"
            ]
          },
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "endingWith": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "specificCharacters": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startingWith": {
            "type": [
              "string",
              "null"
            ]
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "string"
            ],
            "type": "string"
          }
        },
        "required": [
          "allowLowercaseAlphabet",
          "allowUppercaseAlphabet",
          "allowDigits",
          "allowPercentEncodedChars",
          "specificCharacters",
          "startingWith",
          "endingWith",
          "containing",
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadString_Json": {
        "deprecated": false,
        "description": "",
        "properties": {
          "allowDigits": {
            "type": "boolean"
          },
          "allowLowercaseAlphabet": {
            "type": "boolean"
          },
          "allowPercentEncodedChars": {
            "type": "boolean"
          },
          "allowUppercaseAlphabet": {
            "type": "boolean"
          },
          "containing": {
            "type": [
              "string",
              "null"
            ]
          },
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "endingWith": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "specificCharacters": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startingWith": {
            "type": [
              "string",
              "null"
            ]
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "string"
            ],
            "type": "string"
          }
        },
        "required": [
          "allowLowercaseAlphabet",
          "allowUppercaseAlphabet",
          "allowDigits",
          "allowPercentEncodedChars",
          "specificCharacters",
          "startingWith",
          "endingWith",
          "containing",
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadTimeTrigger": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the time will be compared.",
            "enum": [
              "before",
              "after",
              "between",
              "notBetween"
            ],
            "example": "after",
            "type": "string"
          },
          "value": {
            "description": "A time (for after and before operators), or an array of two time (for between and notBetween operators).",
            "example": "08:27:09",
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator",
          "value"
        ],
        "type": "object"
      },
      "RuleReadTimeTriggerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the time will be compared.",
            "enum": [
              "before",
              "after",
              "between",
              "notBetween"
            ],
            "example": "after",
            "type": "string"
          },
          "value": {
            "description": "A time (for after and before operators), or an array of two time (for between and notBetween operators).",
            "example": "08:27:09",
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator",
          "value"
        ],
        "type": "object"
      },
      "RuleReadTrigger": {
        "deprecated": false,
        "description": "",
        "properties": {
          "date": {
            "description": "Rules will only be triggered if the current date matches all of these conditions.",
            "example": [
              {
                "operator": "equals",
                "value": "2023-01-01"
              },
              {
                "operator": "notEquals",
                "value": "2023-01-01"
              },
              {
                "operator": "between",
                "value": [
                  "2023-01-01",
                  "2023-01-02"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "2023-01-01",
                  "2023-01-02"
                ]
              },
              {
                "operator": "after",
                "value": "2023-01-01"
              },
              {
                "operator": "before",
                "value": "2023-01-31"
              },
              {
                "operator": "weekdays",
                "value": [
                  0,
                  1
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadDateTrigger"
            },
            "type": "array"
          },
          "datetime": {
            "description": "Rules will only be triggered if the current date and time match all of these conditions.",
            "example": [
              {
                "operator": "between",
                "value": [
                  "2023-01-01 08:00:00",
                  "2023-01-31 18:00:00"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "2023-01-01 08:00:00",
                  "2023-01-31 18:00:00"
                ]
              },
              {
                "operator": "after",
                "value": "2023-01-01 08:00:00"
              },
              {
                "operator": "before",
                "value": "2023-01-31 18:00:00"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadDateTimeTrigger"
            },
            "type": "array"
          },
          "excludeMethods": {
            "description": "Should the HTTP methods defined in methods be excluded from triggering the rule.",
            "type": "boolean"
          },
          "excludeResponseStatusCodes": {
            "description": "Should the response status codes defined in responseStatusCodes be excluded from triggering the rule.",
            "type": "boolean"
          },
          "ipAddress": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RuleReadAbstractIpTrigger"
              },
              {
                "type": "null"
              }
            ]
          },
          "methods": {
            "example": [
              "GET",
              "POST"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requestHeaders": {
            "items": {
              "$ref": "#/components/schemas/RuleReadHeader"
            },
            "type": "array"
          },
          "responseStatusCodes": {
            "description": "The backend response status code(s) that must trigger the rule",
            "example": [
              500,
              503
            ],
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "sampling": {
            "description": "The percentage of requests that must trigger the rule",
            "example": 47,
            "maximum": 100,
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "source": {
            "description": "The URL to redirect from.",
            "example": "/old-url",
            "type": "string"
          },
          "time": {
            "description": "Rules will only be triggered if the current time matches all of these conditions.",
            "example": [
              {
                "operator": "between",
                "value": [
                  "08:00",
                  "18:00"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "08:00",
                  "18:00"
                ]
              },
              {
                "operator": "after",
                "value": "08:00"
              },
              {
                "operator": "before",
                "value": "18:00"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadTimeTrigger"
            },
            "type": "array"
          }
        },
        "required": [
          "source",
          "methods",
          "excludeMethods",
          "requestHeaders",
          "responseStatusCodes",
          "excludeResponseStatusCodes",
          "ipAddress",
          "datetime",
          "date",
          "time",
          "sampling"
        ],
        "type": "object"
      },
      "RuleReadTriggerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "date": {
            "description": "Rules will only be triggered if the current date matches all of these conditions.",
            "example": [
              {
                "operator": "equals",
                "value": "2023-01-01"
              },
              {
                "operator": "notEquals",
                "value": "2023-01-01"
              },
              {
                "operator": "between",
                "value": [
                  "2023-01-01",
                  "2023-01-02"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "2023-01-01",
                  "2023-01-02"
                ]
              },
              {
                "operator": "after",
                "value": "2023-01-01"
              },
              {
                "operator": "before",
                "value": "2023-01-31"
              },
              {
                "operator": "weekdays",
                "value": [
                  0,
                  1
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadDateTriggerJson"
            },
            "type": "array"
          },
          "datetime": {
            "description": "Rules will only be triggered if the current date and time match all of these conditions.",
            "example": [
              {
                "operator": "between",
                "value": [
                  "2023-01-01 08:00:00",
                  "2023-01-31 18:00:00"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "2023-01-01 08:00:00",
                  "2023-01-31 18:00:00"
                ]
              },
              {
                "operator": "after",
                "value": "2023-01-01 08:00:00"
              },
              {
                "operator": "before",
                "value": "2023-01-31 18:00:00"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadDateTimeTriggerJson"
            },
            "type": "array"
          },
          "excludeMethods": {
            "description": "Should the HTTP methods defined in methods be excluded from triggering the rule.",
            "type": "boolean"
          },
          "excludeResponseStatusCodes": {
            "description": "Should the response status codes defined in responseStatusCodes be excluded from triggering the rule.",
            "type": "boolean"
          },
          "ipAddress": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RuleReadAbstractIpTriggerJson"
              },
              {
                "type": "null"
              }
            ]
          },
          "methods": {
            "example": [
              "GET",
              "POST"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requestHeaders": {
            "items": {
              "$ref": "#/components/schemas/RuleReadHeaderJson"
            },
            "type": "array"
          },
          "responseStatusCodes": {
            "description": "The backend response status code(s) that must trigger the rule",
            "example": [
              500,
              503
            ],
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "sampling": {
            "description": "The percentage of requests that must trigger the rule",
            "example": 47,
            "maximum": 100,
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "source": {
            "description": "The URL to redirect from.",
            "example": "/old-url",
            "type": "string"
          },
          "time": {
            "description": "Rules will only be triggered if the current time matches all of these conditions.",
            "example": [
              {
                "operator": "between",
                "value": [
                  "08:00",
                  "18:00"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "08:00",
                  "18:00"
                ]
              },
              {
                "operator": "after",
                "value": "08:00"
              },
              {
                "operator": "before",
                "value": "18:00"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadTimeTriggerJson"
            },
            "type": "array"
          }
        },
        "required": [
          "source",
          "methods",
          "excludeMethods",
          "requestHeaders",
          "responseStatusCodes",
          "excludeResponseStatusCodes",
          "ipAddress",
          "datetime",
          "date",
          "time",
          "sampling"
        ],
        "type": "object"
      },
      "RuleReadUnderscorize": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "underscorize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleReadUnderscorizeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "underscorize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleReadUppercase": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "uppercase"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleReadUppercaseJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "uppercase"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleReadUuid": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "uuid"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleReadUuidJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleReadAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "uuid"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "description",
          "template",
          "transformers",
          "type"
        ],
        "type": "object"
      },
      "RuleWrite": {
        "deprecated": false,
        "description": "",
        "properties": {
          "actions": {
            "description": "Each `Action` must be an object with a `type` property, and some other properties according to its type:\n\n* `configuration`:\n    * `logEnabled` (bool, required)\n    * `reset` (bool, required)\n * `customHtml`:\n    * `value` (string, required)\n    * `location` (string, required). One of `headStart`, `headEnd`, `bodyStart`, `bodyEnd`\n* `customBody`:\n    * `value` (string, required)\n    * `contentType` (string, required). Content-type header to use for the response.\n* `customStatus` (previously `gone`):\n    * `statusCode` (int, required). A valid status code between 200 and 511 ([see the official documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses) for more information)\n* `header`:\n    * `name` (string, required)\n    * `value` (string, required)\n    * `mode` (string, required). One of `override`, `default`, `replace`, `append`, `add`\n    * `override` (bool, deprecated). Use the `mode` property instead.\n* `meta`:\n    * `type` (string, required). One of `title`, `description`, `keywords`, `author`, `og:title`, `og:description`, `og:type`, `og:image`, `og:url`, `og:locale`, `og:site_name`\n    * `value` (string, required)\n    * `replace` (bool, required)\n* `redirection`:\n    * `location` (string, required)\n    * `statusCode` (int, required). One of `301`, `302`, `307`, `308`\n * `robotsTxt`:\n    * `content` (string, required)\n* `sitemap`:\n    * `name` (string)\n    * `content` (string, required)\n* `structuredData`:\n    * `value` (string, required)",
            "example": [
              {
                "location": "headStart",
                "type": "customHtml",
                "value": "<!-- Hello -->"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractAction"
            },
            "minItems": 1,
            "type": "array"
          },
          "description": {
            "description": "This description field is used to describe the rule and share knowledge with other users",
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "default": true,
            "description": "Set to `false` to disable this rule",
            "example": true,
            "type": "boolean"
          },
          "examples": {
            "description": "Examples are useful to test your rule. They are not used in production.",
            "items": {
              "$ref": "#/components/schemas/RuleWriteExample"
            },
            "type": "array"
          },
          "markers": {
            "description": "Each `Marker` must be an object with a `type` property, and some other properties according to its type:\n* `anything`: No options\n * `custom`:\n    * `regex` (string, required)\n* `enum`\n    * `values` (array of string, required)\n* `date`: No options\n* `datetime`: No options\n * `integer`:\n    * `minimum` (int, required)\n    * `maximum` (int, required)\n * `string`:\n    * `allowLowercaseAlphabet` (bool)\n    * `allowUppercaseAlphabet` (bool)\n    * `allowDigits` (bool)\n    * `allowPercentEncodedChars` (bool)\n    * `specificCharacters` (array of string of length 1)\n    * `startingWith` (string)\n    * `endingWith` (string)\n    * `containing` (string)\n* `uuid`: No options",
            "example": [
              {
                "name": "someMarkerName",
                "transformers": [
                  {
                    "from": "0",
                    "to": "2",
                    "type": "slice"
                  }
                ],
                "type": "enum",
                "values": [
                  "dog",
                  "cat"
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractMarker"
            },
            "type": "array"
          },
          "metadata": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "priority": {
            "description": "A rule with higher priority takes precedence over lower priorities, which means that the actions defined in the higher priority rule will override the similar actions defined in a lower priority one",
            "type": "integer"
          },
          "project": {
            "description": "An IRI reference to the project, of the form `/projects/{project_id}`.",
            "example": "/projects/{projectID}",
            "format": "iri-reference",
            "type": "string"
          },
          "tags": {
            "description": "Tags are useful to filter rules and retrieve them easily",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trigger": {
            "$ref": "#/components/schemas/RuleWriteTrigger"
          },
          "variables": {
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractVariable"
            },
            "type": "array"
          }
        },
        "required": [
          "project",
          "trigger"
        ],
        "type": "object"
      },
      "RuleWriteAbstractAction": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "configuration": "#/components/schemas/RuleWriteActionConfiguration",
            "customBody": "#/components/schemas/RuleWriteActionCustomBody",
            "customHtml": "#/components/schemas/RuleWriteActionCustomHtml",
            "custom_status": "#/components/schemas/RuleWriteActionCustomStatus",
            "gone": "#/components/schemas/RuleWriteActionCustomStatus",
            "header": "#/components/schemas/RuleWriteActionResponseHeader",
            "meta": "#/components/schemas/RuleWriteActionSeoOverride",
            "redirection": "#/components/schemas/RuleWriteActionRedirection",
            "robotsTxt": "#/components/schemas/RuleWriteActionRobotsTXT",
            "sitemap": "#/components/schemas/RuleWriteActionSitemap",
            "structuredData": "#/components/schemas/RuleWriteActionStructuredData"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleWriteActionConfiguration"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionCustomHtml"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionCustomBody"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionCustomStatus"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionResponseHeader"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionRedirection"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionRobotsTXT"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionSeoOverride"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionSitemap"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionStructuredData"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleWriteAbstractActionJson": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "configuration": "#/components/schemas/RuleWriteActionConfigurationJson",
            "customBody": "#/components/schemas/RuleWriteActionCustomBodyJson",
            "customHtml": "#/components/schemas/RuleWriteActionCustomHtmlJson",
            "custom_status": "#/components/schemas/RuleWriteActionCustomStatusJson",
            "gone": "#/components/schemas/RuleWriteActionCustomStatusJson",
            "header": "#/components/schemas/RuleWriteActionResponseHeaderJson",
            "meta": "#/components/schemas/RuleWriteActionSeoOverrideJson",
            "redirection": "#/components/schemas/RuleWriteActionRedirectionJson",
            "robotsTxt": "#/components/schemas/RuleWriteActionRobotsTXTJson",
            "sitemap": "#/components/schemas/RuleWriteActionSitemapJson",
            "structuredData": "#/components/schemas/RuleWriteActionStructuredDataJson"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleWriteActionConfigurationJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionCustomHtmlJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionCustomBodyJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionCustomStatusJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionResponseHeaderJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionRedirectionJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionRobotsTXTJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionSeoOverrideJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionSitemapJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteActionStructuredDataJson"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleWriteAbstractIpTrigger": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "equals": "#/components/schemas/RuleWriteIpTriggerEquals",
            "greaterThan": "#/components/schemas/RuleWriteIpTriggerGreaterThan",
            "greaterThanOrEquals": "#/components/schemas/RuleWriteIpTriggerGreaterThanOrEquals",
            "inRange": "#/components/schemas/RuleWriteIpTriggerInRange",
            "lessThan": "#/components/schemas/RuleWriteIpTriggerLessThan",
            "lessThanOrEquals": "#/components/schemas/RuleWriteIpTriggerLessThanOrEquals",
            "notEquals": "#/components/schemas/RuleWriteIpTriggerNotEquals",
            "notInRange": "#/components/schemas/RuleWriteIpTriggerNotInRange",
            "notOneOf": "#/components/schemas/RuleWriteIpTriggerNotOneOf",
            "oneOf": "#/components/schemas/RuleWriteIpTriggerOneOf"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerEquals"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerNotEquals"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerOneOf"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerNotOneOf"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerGreaterThan"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerGreaterThanOrEquals"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerLessThan"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerLessThanOrEquals"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerInRange"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerNotInRange"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleWriteAbstractIpTriggerJson": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "equals": "#/components/schemas/RuleWriteIpTriggerEqualsJson",
            "greaterThan": "#/components/schemas/RuleWriteIpTriggerGreaterThanJson",
            "greaterThanOrEquals": "#/components/schemas/RuleWriteIpTriggerGreaterThanOrEqualsJson",
            "inRange": "#/components/schemas/RuleWriteIpTriggerInRangeJson",
            "lessThan": "#/components/schemas/RuleWriteIpTriggerLessThanJson",
            "lessThanOrEquals": "#/components/schemas/RuleWriteIpTriggerLessThanOrEqualsJson",
            "notEquals": "#/components/schemas/RuleWriteIpTriggerNotEqualsJson",
            "notInRange": "#/components/schemas/RuleWriteIpTriggerNotInRangeJson",
            "notOneOf": "#/components/schemas/RuleWriteIpTriggerNotOneOfJson",
            "oneOf": "#/components/schemas/RuleWriteIpTriggerOneOfJson"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerEqualsJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerNotEqualsJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerOneOfJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerNotOneOfJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerGreaterThanJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerGreaterThanOrEqualsJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerLessThanJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerLessThanOrEqualsJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerInRangeJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIpTriggerNotInRangeJson"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleWriteAbstractMarker": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "anything": "#/components/schemas/RuleWriteAnything",
            "custom": "#/components/schemas/RuleWriteCustom",
            "date": "#/components/schemas/RuleWriteDate",
            "datetime": "#/components/schemas/RuleWriteDatetime",
            "enum": "#/components/schemas/RuleWriteEnum",
            "integer": "#/components/schemas/RuleWriteInteger",
            "string": "#/components/schemas/RuleWriteString_",
            "uuid": "#/components/schemas/RuleWriteUuid"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleWriteAnything"
          },
          {
            "$ref": "#/components/schemas/RuleWriteCustom"
          },
          {
            "$ref": "#/components/schemas/RuleWriteDate"
          },
          {
            "$ref": "#/components/schemas/RuleWriteDatetime"
          },
          {
            "$ref": "#/components/schemas/RuleWriteEnum"
          },
          {
            "$ref": "#/components/schemas/RuleWriteInteger"
          },
          {
            "$ref": "#/components/schemas/RuleWriteString_"
          },
          {
            "$ref": "#/components/schemas/RuleWriteUuid"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleWriteAbstractMarkerJson": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "anything": "#/components/schemas/RuleWriteAnythingJson",
            "custom": "#/components/schemas/RuleWriteCustomJson",
            "date": "#/components/schemas/RuleWriteDateJson",
            "datetime": "#/components/schemas/RuleWriteDatetimeJson",
            "enum": "#/components/schemas/RuleWriteEnumJson",
            "integer": "#/components/schemas/RuleWriteIntegerJson",
            "string": "#/components/schemas/RuleWriteString_Json",
            "uuid": "#/components/schemas/RuleWriteUuidJson"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleWriteAnythingJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteCustomJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteDateJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteDatetimeJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteEnumJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteIntegerJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteString_Json"
          },
          {
            "$ref": "#/components/schemas/RuleWriteUuidJson"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleWriteAbstractTransformer": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "camelize": "#/components/schemas/RuleWriteCamelize",
            "dasherize": "#/components/schemas/RuleWriteDasherize",
            "lowercase": "#/components/schemas/RuleWriteLowercase",
            "replace": "#/components/schemas/RuleWriteReplace",
            "slice": "#/components/schemas/RuleWriteSlice",
            "underscorize": "#/components/schemas/RuleWriteUnderscorize",
            "uppercase": "#/components/schemas/RuleWriteUppercase"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleWriteCamelize"
          },
          {
            "$ref": "#/components/schemas/RuleWriteDasherize"
          },
          {
            "$ref": "#/components/schemas/RuleWriteLowercase"
          },
          {
            "$ref": "#/components/schemas/RuleWriteReplace"
          },
          {
            "$ref": "#/components/schemas/RuleWriteSlice"
          },
          {
            "$ref": "#/components/schemas/RuleWriteUnderscorize"
          },
          {
            "$ref": "#/components/schemas/RuleWriteUppercase"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleWriteAbstractTransformerJson": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "camelize": "#/components/schemas/RuleWriteCamelizeJson",
            "dasherize": "#/components/schemas/RuleWriteDasherizeJson",
            "lowercase": "#/components/schemas/RuleWriteLowercaseJson",
            "replace": "#/components/schemas/RuleWriteReplaceJson",
            "slice": "#/components/schemas/RuleWriteSliceJson",
            "underscorize": "#/components/schemas/RuleWriteUnderscorizeJson",
            "uppercase": "#/components/schemas/RuleWriteUppercaseJson"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleWriteCamelizeJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteDasherizeJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteLowercaseJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteReplaceJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteSliceJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteUnderscorizeJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteUppercaseJson"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleWriteAbstractVariable": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "marker": "#/components/schemas/RuleWriteMarker",
            "requestHeader": "#/components/schemas/RuleWriteRequestHeader",
            "requestHost": "#/components/schemas/RuleWriteRequestHost",
            "requestMethod": "#/components/schemas/RuleWriteRequestMethod",
            "requestPath": "#/components/schemas/RuleWriteRequestPath",
            "requestRemoteAddress": "#/components/schemas/RuleWriteRequestRemoteAddress",
            "requestScheme": "#/components/schemas/RuleWriteRequestScheme",
            "requestTime": "#/components/schemas/RuleWriteRequestTime"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleWriteMarker"
          },
          {
            "$ref": "#/components/schemas/RuleWriteRequestHeader"
          },
          {
            "$ref": "#/components/schemas/RuleWriteRequestHost"
          },
          {
            "$ref": "#/components/schemas/RuleWriteRequestMethod"
          },
          {
            "$ref": "#/components/schemas/RuleWriteRequestPath"
          },
          {
            "$ref": "#/components/schemas/RuleWriteRequestRemoteAddress"
          },
          {
            "$ref": "#/components/schemas/RuleWriteRequestScheme"
          },
          {
            "$ref": "#/components/schemas/RuleWriteRequestTime"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleWriteAbstractVariableJson": {
        "deprecated": false,
        "description": "",
        "discriminator": {
          "mapping": {
            "marker": "#/components/schemas/RuleWriteMarkerJson",
            "requestHeader": "#/components/schemas/RuleWriteRequestHeaderJson",
            "requestHost": "#/components/schemas/RuleWriteRequestHostJson",
            "requestMethod": "#/components/schemas/RuleWriteRequestMethodJson",
            "requestPath": "#/components/schemas/RuleWriteRequestPathJson",
            "requestRemoteAddress": "#/components/schemas/RuleWriteRequestRemoteAddressJson",
            "requestScheme": "#/components/schemas/RuleWriteRequestSchemeJson",
            "requestTime": "#/components/schemas/RuleWriteRequestTimeJson"
          },
          "propertyName": "type"
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuleWriteMarkerJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteRequestHeaderJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteRequestHostJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteRequestMethodJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteRequestPathJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteRequestRemoteAddressJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteRequestSchemeJson"
          },
          {
            "$ref": "#/components/schemas/RuleWriteRequestTimeJson"
          }
        ],
        "properties": [],
        "required": [],
        "type": "object"
      },
      "RuleWriteActionConfiguration": {
        "deprecated": false,
        "description": "",
        "properties": {
          "logEnabled": {
            "type": "boolean"
          },
          "reset": {
            "type": "boolean"
          },
          "stop": {
            "type": "boolean"
          },
          "type": {
            "enum": [
              "configuration"
            ],
            "type": "string"
          }
        },
        "required": [
          "logEnabled",
          "reset",
          "stop",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionConfigurationJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "logEnabled": {
            "type": "boolean"
          },
          "reset": {
            "type": "boolean"
          },
          "stop": {
            "type": "boolean"
          },
          "type": {
            "enum": [
              "configuration"
            ],
            "type": "string"
          }
        },
        "required": [
          "logEnabled",
          "reset",
          "stop",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionCustomBody": {
        "deprecated": false,
        "description": "",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "type": {
            "enum": [
              "customBody"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "contentType",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionCustomBodyJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "type": {
            "enum": [
              "customBody"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "contentType",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionCustomHtml": {
        "deprecated": false,
        "description": "",
        "properties": {
          "location": {
            "enum": [
              "headStart",
              "headEnd",
              "bodyStart",
              "bodyEnd"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "customHtml"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "location",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionCustomHtmlJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "location": {
            "enum": [
              "headStart",
              "headEnd",
              "bodyStart",
              "bodyEnd"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "customHtml"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "location",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionCustomStatus": {
        "deprecated": false,
        "description": "",
        "properties": {
          "statusCode": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "custom_status",
              "gone"
            ],
            "type": "string"
          }
        },
        "required": [
          "statusCode",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionCustomStatusJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "statusCode": {
            "type": "integer"
          },
          "type": {
            "enum": [
              "custom_status",
              "gone"
            ],
            "type": "string"
          }
        },
        "required": [
          "statusCode",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionRedirection": {
        "deprecated": false,
        "description": "",
        "properties": {
          "location": {
            "type": "string"
          },
          "statusCode": {
            "enum": [
              301,
              302,
              307,
              308
            ],
            "type": "integer"
          },
          "type": {
            "enum": [
              "redirection"
            ],
            "type": "string"
          }
        },
        "required": [
          "location",
          "statusCode",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionRedirectionJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "location": {
            "type": "string"
          },
          "statusCode": {
            "enum": [
              301,
              302,
              307,
              308
            ],
            "type": "integer"
          },
          "type": {
            "enum": [
              "redirection"
            ],
            "type": "string"
          }
        },
        "required": [
          "location",
          "statusCode",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionResponseHeader": {
        "deprecated": false,
        "description": "",
        "properties": {
          "mode": {
            "enum": [
              "override",
              "default",
              "replace",
              "add",
              "remove"
            ],
            "example": "default",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "override": {
            "deprecated": true,
            "type": [
              "boolean",
              "null"
            ]
          },
          "type": {
            "enum": [
              "header"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionResponseHeaderJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "mode": {
            "enum": [
              "override",
              "default",
              "replace",
              "add",
              "remove"
            ],
            "example": "default",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "override": {
            "deprecated": true,
            "type": [
              "boolean",
              "null"
            ]
          },
          "type": {
            "enum": [
              "header"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionRobotsTXT": {
        "deprecated": false,
        "description": "",
        "properties": {
          "content": {
            "type": "string"
          },
          "type": {
            "enum": [
              "robotsTxt"
            ],
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionRobotsTXTJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "content": {
            "type": "string"
          },
          "type": {
            "enum": [
              "robotsTxt"
            ],
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionSeoOverride": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "enum": [
              "title",
              "description",
              "keywords",
              "author",
              "og:title",
              "og:description",
              "og:type",
              "og:image",
              "og:url",
              "og:locale",
              "og:site_name"
            ],
            "type": "string"
          },
          "replace": {
            "type": "boolean"
          },
          "type": {
            "enum": [
              "meta"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value",
          "replace",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionSeoOverrideJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "enum": [
              "title",
              "description",
              "keywords",
              "author",
              "og:title",
              "og:description",
              "og:type",
              "og:image",
              "og:url",
              "og:locale",
              "og:site_name"
            ],
            "type": "string"
          },
          "replace": {
            "type": "boolean"
          },
          "type": {
            "enum": [
              "meta"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value",
          "replace",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionSitemap": {
        "deprecated": false,
        "description": "",
        "properties": {
          "content": {
            "type": "string"
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": {
            "enum": [
              "sitemap"
            ],
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionSitemapJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "content": {
            "type": "string"
          },
          "name": {
            "type": [
              "string",
              "null"
            ]
          },
          "type": {
            "enum": [
              "sitemap"
            ],
            "type": "string"
          }
        },
        "required": [
          "content",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionStructuredData": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "structuredData"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteActionStructuredDataJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "structuredData"
            ],
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteAnything": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "anything"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteAnythingJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "anything"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteCamelize": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "camelize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleWriteCamelizeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "camelize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleWriteCustom": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "regex": {
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "custom"
            ],
            "type": "string"
          }
        },
        "required": [
          "regex",
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteCustomJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "regex": {
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "custom"
            ],
            "type": "string"
          }
        },
        "required": [
          "regex",
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteDasherize": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "dasherize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleWriteDasherizeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "dasherize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleWriteDate": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "date"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteDateJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "date"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteDateTimeTrigger": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the date and time will be compared.",
            "enum": [
              "before",
              "after",
              "between",
              "notBetween"
            ],
            "example": "after",
            "type": "string"
          },
          "value": {
            "description": "A datetime (for after and before operators), or an array of two datetimes (for between and notBetween operators).",
            "example": [
              "2021-01-01 08:27:09",
              "2021-01-31 19:15:00"
            ],
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator"
        ],
        "type": "object"
      },
      "RuleWriteDateTimeTriggerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the date and time will be compared.",
            "enum": [
              "before",
              "after",
              "between",
              "notBetween"
            ],
            "example": "after",
            "type": "string"
          },
          "value": {
            "description": "A datetime (for after and before operators), or an array of two datetimes (for between and notBetween operators).",
            "example": [
              "2021-01-01 08:27:09",
              "2021-01-31 19:15:00"
            ],
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator"
        ],
        "type": "object"
      },
      "RuleWriteDateTrigger": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the date will be compared.",
            "enum": [
              "equals",
              "notEquals",
              "before",
              "after",
              "between",
              "notBetween",
              "weekdays"
            ],
            "example": "equals",
            "type": "string"
          },
          "value": {
            "description": "A date (for equals, notEquals, after or before operators), an array of two dates (for between or notBetween operators), or an array of integers (for weekdays operator, 0 for Sunday, 1 for Monday, and so on).",
            "example": "2023-03-07",
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator"
        ],
        "type": "object"
      },
      "RuleWriteDateTriggerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the date will be compared.",
            "enum": [
              "equals",
              "notEquals",
              "before",
              "after",
              "between",
              "notBetween",
              "weekdays"
            ],
            "example": "equals",
            "type": "string"
          },
          "value": {
            "description": "A date (for equals, notEquals, after or before operators), an array of two dates (for between or notBetween operators), or an array of integers (for weekdays operator, 0 for Sunday, 1 for Monday, and so on).",
            "example": "2023-03-07",
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator"
        ],
        "type": "object"
      },
      "RuleWriteDatetime": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "datetime"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteDatetimeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "datetime"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteEnum": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "enum"
            ],
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteEnumJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "enum"
            ],
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteExample": {
        "deprecated": false,
        "description": "",
        "properties": {
          "datetime": {
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "headers": {
            "items": {
              "$ref": "#/components/schemas/RuleWriteHeader1"
            },
            "type": "array"
          },
          "ipAddress": {
            "type": [
              "string",
              "null"
            ]
          },
          "method": {
            "type": [
              "string",
              "null"
            ]
          },
          "mustMatch": {
            "type": "boolean"
          },
          "responseStatusCode": {
            "maximum": 599,
            "minimum": 100,
            "type": [
              "integer",
              "null"
            ]
          },
          "url": {
            "pattern": "^(.*(^(/|://|https?://).*).*)$",
            "type": "string"
          }
        },
        "required": [
          "mustMatch",
          "url"
        ],
        "type": "object"
      },
      "RuleWriteExampleJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "datetime": {
            "format": "date-time",
            "type": [
              "string",
              "null"
            ]
          },
          "headers": {
            "items": {
              "$ref": "#/components/schemas/RuleWriteHeader1Json"
            },
            "type": "array"
          },
          "ipAddress": {
            "type": [
              "string",
              "null"
            ]
          },
          "method": {
            "type": [
              "string",
              "null"
            ]
          },
          "mustMatch": {
            "type": "boolean"
          },
          "responseStatusCode": {
            "maximum": 599,
            "minimum": 100,
            "type": [
              "integer",
              "null"
            ]
          },
          "url": {
            "pattern": "^(.*(^(/|://|https?://).*).*)$",
            "type": "string"
          }
        },
        "required": [
          "mustMatch",
          "url"
        ],
        "type": "object"
      },
      "RuleWriteHeader": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The operator with which the value will be compared",
            "example": "Accept",
            "type": "string"
          },
          "operator": {
            "description": "The name of the request HTTP header",
            "enum": [
              "isDefined",
              "isNotDefined",
              "equals",
              "isNotEqualTo",
              "contains",
              "doesNotContain",
              "endsWith",
              "startsWith",
              "matchesRegex"
            ],
            "example": "isNotEqualTo",
            "type": "string"
          },
          "value": {
            "example": "application/json",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "name",
          "operator"
        ],
        "type": "object"
      },
      "RuleWriteHeader1": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "RuleWriteHeader1Json": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "type": "object"
      },
      "RuleWriteHeaderJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The operator with which the value will be compared",
            "example": "Accept",
            "type": "string"
          },
          "operator": {
            "description": "The name of the request HTTP header",
            "enum": [
              "isDefined",
              "isNotDefined",
              "equals",
              "isNotEqualTo",
              "contains",
              "doesNotContain",
              "endsWith",
              "startsWith",
              "matchesRegex"
            ],
            "example": "isNotEqualTo",
            "type": "string"
          },
          "value": {
            "example": "application/json",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "name",
          "operator"
        ],
        "type": "object"
      },
      "RuleWriteInteger": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "maximum": {
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "minimum": {
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "integer"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteIntegerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "maximum": {
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "minimum": {
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "integer"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerEquals": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The value of the request IP address to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "equals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerEqualsJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The value of the request IP address to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "equals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerGreaterThan": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum (excluded) value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "greaterThan"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerGreaterThanJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum (excluded) value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "greaterThan"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerGreaterThanOrEquals": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "greaterThanOrEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerGreaterThanOrEqualsJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "greaterThanOrEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerInRange": {
        "deprecated": false,
        "description": "",
        "properties": {
          "end": {
            "description": "The upper (included) bound of the IP range to which the request IP address must belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "start": {
            "description": "The lower (included) bound of the IP range to which the request IP address must belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "inRange"
            ],
            "type": "string"
          }
        },
        "required": [
          "start",
          "end",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerInRangeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "end": {
            "description": "The upper (included) bound of the IP range to which the request IP address must belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "start": {
            "description": "The lower (included) bound of the IP range to which the request IP address must belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "inRange"
            ],
            "type": "string"
          }
        },
        "required": [
          "start",
          "end",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerLessThan": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum (excluded) value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "lessThan"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerLessThanJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The minimum (excluded) value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "lessThan"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerLessThanOrEquals": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The maximum value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "lessThanOrEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerLessThanOrEqualsJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The maximum value of the IP address of the request to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "lessThanOrEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerNotEquals": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The value of the request IP address must be different to this value to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "notEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerNotEqualsJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ip": {
            "description": "The value of the request IP address must be different to this value to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "notEquals"
            ],
            "type": "string"
          }
        },
        "required": [
          "ip",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerNotInRange": {
        "deprecated": false,
        "description": "",
        "properties": {
          "end": {
            "description": "The upper (included) bound of the IP range to which the request IP address must not belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "start": {
            "description": "The lower (included) bound of the IP range to which the request IP address must not belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "notInRange"
            ],
            "type": "string"
          }
        },
        "required": [
          "start",
          "end",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerNotInRangeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "end": {
            "description": "The upper (included) bound of the IP range to which the request IP address must not belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "start": {
            "description": "The lower (included) bound of the IP range to which the request IP address must not belong to trigger this rule",
            "example": "1.2.3.4",
            "format": "ipv4",
            "type": "string"
          },
          "type": {
            "enum": [
              "notInRange"
            ],
            "type": "string"
          }
        },
        "required": [
          "start",
          "end",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerNotOneOf": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ips": {
            "description": "The list the request IP address must be one of to trigger this rule",
            "items": {
              "example": "1.2.3.4",
              "format": "ipv4",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "type": {
            "enum": [
              "notOneOf"
            ],
            "type": "string"
          }
        },
        "required": [
          "ips",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerNotOneOfJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ips": {
            "description": "The list the request IP address must be one of to trigger this rule",
            "items": {
              "example": "1.2.3.4",
              "format": "ipv4",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "type": {
            "enum": [
              "notOneOf"
            ],
            "type": "string"
          }
        },
        "required": [
          "ips",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerOneOf": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ips": {
            "description": "The list the request IP address must be one of to trigger this rule",
            "items": {
              "example": "1.2.3.4",
              "format": "ipv4",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "type": {
            "enum": [
              "oneOf"
            ],
            "type": "string"
          }
        },
        "required": [
          "ips",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteIpTriggerOneOfJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "ips": {
            "description": "The list the request IP address must be one of to trigger this rule",
            "items": {
              "example": "1.2.3.4",
              "format": "ipv4",
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "type": {
            "enum": [
              "oneOf"
            ],
            "type": "string"
          }
        },
        "required": [
          "ips",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "actions": {
            "description": "Each `Action` must be an object with a `type` property, and some other properties according to its type:\n\n* `configuration`:\n    * `logEnabled` (bool, required)\n    * `reset` (bool, required)\n * `customHtml`:\n    * `value` (string, required)\n    * `location` (string, required). One of `headStart`, `headEnd`, `bodyStart`, `bodyEnd`\n* `customBody`:\n    * `value` (string, required)\n    * `contentType` (string, required). Content-type header to use for the response.\n* `customStatus` (previously `gone`):\n    * `statusCode` (int, required). A valid status code between 200 and 511 ([see the official documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses) for more information)\n* `header`:\n    * `name` (string, required)\n    * `value` (string, required)\n    * `mode` (string, required). One of `override`, `default`, `replace`, `append`, `add`\n    * `override` (bool, deprecated). Use the `mode` property instead.\n* `meta`:\n    * `type` (string, required). One of `title`, `description`, `keywords`, `author`, `og:title`, `og:description`, `og:type`, `og:image`, `og:url`, `og:locale`, `og:site_name`\n    * `value` (string, required)\n    * `replace` (bool, required)\n* `redirection`:\n    * `location` (string, required)\n    * `statusCode` (int, required). One of `301`, `302`, `307`, `308`\n * `robotsTxt`:\n    * `content` (string, required)\n* `sitemap`:\n    * `name` (string)\n    * `content` (string, required)\n* `structuredData`:\n    * `value` (string, required)",
            "example": [
              {
                "location": "headStart",
                "type": "customHtml",
                "value": "<!-- Hello -->"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractActionJson"
            },
            "minItems": 1,
            "type": "array"
          },
          "description": {
            "description": "This description field is used to describe the rule and share knowledge with other users",
            "type": [
              "string",
              "null"
            ]
          },
          "enabled": {
            "default": true,
            "description": "Set to `false` to disable this rule",
            "example": true,
            "type": "boolean"
          },
          "examples": {
            "description": "Examples are useful to test your rule. They are not used in production.",
            "items": {
              "$ref": "#/components/schemas/RuleWriteExampleJson"
            },
            "type": "array"
          },
          "markers": {
            "description": "Each `Marker` must be an object with a `type` property, and some other properties according to its type:\n* `anything`: No options\n * `custom`:\n    * `regex` (string, required)\n* `enum`\n    * `values` (array of string, required)\n* `date`: No options\n* `datetime`: No options\n * `integer`:\n    * `minimum` (int, required)\n    * `maximum` (int, required)\n * `string`:\n    * `allowLowercaseAlphabet` (bool)\n    * `allowUppercaseAlphabet` (bool)\n    * `allowDigits` (bool)\n    * `allowPercentEncodedChars` (bool)\n    * `specificCharacters` (array of string of length 1)\n    * `startingWith` (string)\n    * `endingWith` (string)\n    * `containing` (string)\n* `uuid`: No options",
            "example": [
              {
                "name": "someMarkerName",
                "transformers": [
                  {
                    "from": "0",
                    "to": "2",
                    "type": "slice"
                  }
                ],
                "type": "enum",
                "values": [
                  "dog",
                  "cat"
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractMarkerJson"
            },
            "type": "array"
          },
          "metadata": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "priority": {
            "description": "A rule with higher priority takes precedence over lower priorities, which means that the actions defined in the higher priority rule will override the similar actions defined in a lower priority one",
            "type": "integer"
          },
          "project": {
            "description": "An IRI reference to the project, of the form `/projects/{project_id}`.",
            "example": "/projects/{projectID}",
            "format": "iri-reference",
            "type": "string"
          },
          "tags": {
            "description": "Tags are useful to filter rules and retrieve them easily",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "trigger": {
            "$ref": "#/components/schemas/RuleWriteTriggerJson"
          },
          "variables": {
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractVariableJson"
            },
            "type": "array"
          }
        },
        "required": [
          "project",
          "trigger"
        ],
        "type": "object"
      },
      "RuleWriteLowercase": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "lowercase"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleWriteLowercaseJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "lowercase"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleWriteMarker": {
        "deprecated": false,
        "description": "",
        "properties": {
          "marker": {
            "description": "The name of the trigger marker to associate with this variable",
            "example": "markerName",
            "type": "string"
          },
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "marker"
            ],
            "type": "string"
          }
        },
        "required": [
          "marker",
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteMarkerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "marker": {
            "description": "The name of the trigger marker to associate with this variable",
            "example": "markerName",
            "type": "string"
          },
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "marker"
            ],
            "type": "string"
          }
        },
        "required": [
          "marker",
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteReplace": {
        "deprecated": false,
        "description": "",
        "properties": {
          "something": {
            "description": "The value to be replaced",
            "example": "foo",
            "type": "string"
          },
          "type": {
            "enum": [
              "replace"
            ],
            "type": "string"
          },
          "with": {
            "description": "The value to use as replacement",
            "example": "bar",
            "type": "string"
          }
        },
        "required": [
          "something",
          "with",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteReplaceJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "something": {
            "description": "The value to be replaced",
            "example": "foo",
            "type": "string"
          },
          "type": {
            "enum": [
              "replace"
            ],
            "type": "string"
          },
          "with": {
            "description": "The value to use as replacement",
            "example": "bar",
            "type": "string"
          }
        },
        "required": [
          "something",
          "with",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteRequestHeader": {
        "deprecated": false,
        "description": "",
        "properties": {
          "defaultValue": {
            "type": [
              "string",
              "null"
            ]
          },
          "headerName": {
            "type": "string"
          },
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestHeader"
            ],
            "type": "string"
          }
        },
        "required": [
          "headerName",
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteRequestHeaderJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "defaultValue": {
            "type": [
              "string",
              "null"
            ]
          },
          "headerName": {
            "type": "string"
          },
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestHeader"
            ],
            "type": "string"
          }
        },
        "required": [
          "headerName",
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteRequestHost": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestHost"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteRequestHostJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestHost"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteRequestMethod": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestMethod"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteRequestMethodJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestMethod"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteRequestPath": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestPath"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteRequestPathJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestPath"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteRequestRemoteAddress": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestRemoteAddress"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteRequestRemoteAddressJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestRemoteAddress"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteRequestScheme": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestScheme"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteRequestSchemeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestScheme"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteRequestTime": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestTime"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteRequestTimeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "name": {
            "description": "The name of the variable as it must appear in actions",
            "example": "myVariable",
            "type": "string"
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "requestTime"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteSlice": {
        "deprecated": false,
        "description": "",
        "properties": {
          "from": {
            "description": "Start position of the part of the input value to be returned",
            "example": "3",
            "type": "string"
          },
          "to": {
            "description": "End position of the part of the input value to be returned",
            "example": "8",
            "type": "string"
          },
          "type": {
            "enum": [
              "slice"
            ],
            "type": "string"
          }
        },
        "required": [
          "from",
          "to",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteSliceJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "from": {
            "description": "Start position of the part of the input value to be returned",
            "example": "3",
            "type": "string"
          },
          "to": {
            "description": "End position of the part of the input value to be returned",
            "example": "8",
            "type": "string"
          },
          "type": {
            "enum": [
              "slice"
            ],
            "type": "string"
          }
        },
        "required": [
          "from",
          "to",
          "type"
        ],
        "type": "object"
      },
      "RuleWriteString_": {
        "deprecated": false,
        "description": "",
        "properties": {
          "allowDigits": {
            "type": "boolean"
          },
          "allowLowercaseAlphabet": {
            "type": "boolean"
          },
          "allowPercentEncodedChars": {
            "type": "boolean"
          },
          "allowUppercaseAlphabet": {
            "type": "boolean"
          },
          "containing": {
            "type": [
              "string",
              "null"
            ]
          },
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "endingWith": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "specificCharacters": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startingWith": {
            "type": [
              "string",
              "null"
            ]
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "string"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteString_Json": {
        "deprecated": false,
        "description": "",
        "properties": {
          "allowDigits": {
            "type": "boolean"
          },
          "allowLowercaseAlphabet": {
            "type": "boolean"
          },
          "allowPercentEncodedChars": {
            "type": "boolean"
          },
          "allowUppercaseAlphabet": {
            "type": "boolean"
          },
          "containing": {
            "type": [
              "string",
              "null"
            ]
          },
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "endingWith": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "specificCharacters": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "startingWith": {
            "type": [
              "string",
              "null"
            ]
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "string"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteTimeTrigger": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the time will be compared.",
            "enum": [
              "before",
              "after",
              "between",
              "notBetween"
            ],
            "example": "after",
            "type": "string"
          },
          "value": {
            "description": "A time (for after and before operators), or an array of two time (for between and notBetween operators).",
            "example": "08:27:09",
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator"
        ],
        "type": "object"
      },
      "RuleWriteTimeTriggerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "operator": {
            "description": "The operator with which the time will be compared.",
            "enum": [
              "before",
              "after",
              "between",
              "notBetween"
            ],
            "example": "after",
            "type": "string"
          },
          "value": {
            "description": "A time (for after and before operators), or an array of two time (for between and notBetween operators).",
            "example": "08:27:09",
            "oneOf": [
              {
                "items": {
                  "format": "date-time",
                  "type": "string"
                },
                "type": "array"
              },
              {
                "format": "date-time",
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "operator"
        ],
        "type": "object"
      },
      "RuleWriteTrigger": {
        "deprecated": false,
        "description": "",
        "properties": {
          "date": {
            "description": "Rules will only be triggered if the current date matches all of these conditions.",
            "example": [
              {
                "operator": "equals",
                "value": "2023-01-01"
              },
              {
                "operator": "notEquals",
                "value": "2023-01-01"
              },
              {
                "operator": "between",
                "value": [
                  "2023-01-01",
                  "2023-01-02"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "2023-01-01",
                  "2023-01-02"
                ]
              },
              {
                "operator": "after",
                "value": "2023-01-01"
              },
              {
                "operator": "before",
                "value": "2023-01-31"
              },
              {
                "operator": "weekdays",
                "value": [
                  0,
                  1
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteDateTrigger"
            },
            "type": "array"
          },
          "datetime": {
            "description": "Rules will only be triggered if the current date and time match all of these conditions.",
            "example": [
              {
                "operator": "between",
                "value": [
                  "2023-01-01 08:00:00",
                  "2023-01-31 18:00:00"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "2023-01-01 08:00:00",
                  "2023-01-31 18:00:00"
                ]
              },
              {
                "operator": "after",
                "value": "2023-01-01 08:00:00"
              },
              {
                "operator": "before",
                "value": "2023-01-31 18:00:00"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteDateTimeTrigger"
            },
            "type": "array"
          },
          "excludeMethods": {
            "description": "Should the HTTP methods defined in methods be excluded from triggering the rule.",
            "type": "boolean"
          },
          "excludeResponseStatusCodes": {
            "description": "Should the response status codes defined in responseStatusCodes be excluded from triggering the rule.",
            "type": "boolean"
          },
          "ipAddress": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RuleWriteAbstractIpTrigger"
              },
              {
                "type": "null"
              }
            ]
          },
          "methods": {
            "example": [
              "GET",
              "POST"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requestHeaders": {
            "items": {
              "$ref": "#/components/schemas/RuleWriteHeader"
            },
            "type": "array"
          },
          "responseStatusCodes": {
            "description": "The backend response status code(s) that must trigger the rule",
            "example": [
              500,
              503
            ],
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "sampling": {
            "description": "The percentage of requests that must trigger the rule",
            "example": 47,
            "maximum": 100,
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "source": {
            "description": "The URL to redirect from.",
            "example": "/old-url",
            "type": "string"
          },
          "time": {
            "description": "Rules will only be triggered if the current time matches all of these conditions.",
            "example": [
              {
                "operator": "between",
                "value": [
                  "08:00",
                  "18:00"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "08:00",
                  "18:00"
                ]
              },
              {
                "operator": "after",
                "value": "08:00"
              },
              {
                "operator": "before",
                "value": "18:00"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteTimeTrigger"
            },
            "type": "array"
          }
        },
        "required": [
          "source"
        ],
        "type": "object"
      },
      "RuleWriteTriggerJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "date": {
            "description": "Rules will only be triggered if the current date matches all of these conditions.",
            "example": [
              {
                "operator": "equals",
                "value": "2023-01-01"
              },
              {
                "operator": "notEquals",
                "value": "2023-01-01"
              },
              {
                "operator": "between",
                "value": [
                  "2023-01-01",
                  "2023-01-02"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "2023-01-01",
                  "2023-01-02"
                ]
              },
              {
                "operator": "after",
                "value": "2023-01-01"
              },
              {
                "operator": "before",
                "value": "2023-01-31"
              },
              {
                "operator": "weekdays",
                "value": [
                  0,
                  1
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteDateTriggerJson"
            },
            "type": "array"
          },
          "datetime": {
            "description": "Rules will only be triggered if the current date and time match all of these conditions.",
            "example": [
              {
                "operator": "between",
                "value": [
                  "2023-01-01 08:00:00",
                  "2023-01-31 18:00:00"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "2023-01-01 08:00:00",
                  "2023-01-31 18:00:00"
                ]
              },
              {
                "operator": "after",
                "value": "2023-01-01 08:00:00"
              },
              {
                "operator": "before",
                "value": "2023-01-31 18:00:00"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteDateTimeTriggerJson"
            },
            "type": "array"
          },
          "excludeMethods": {
            "description": "Should the HTTP methods defined in methods be excluded from triggering the rule.",
            "type": "boolean"
          },
          "excludeResponseStatusCodes": {
            "description": "Should the response status codes defined in responseStatusCodes be excluded from triggering the rule.",
            "type": "boolean"
          },
          "ipAddress": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RuleWriteAbstractIpTriggerJson"
              },
              {
                "type": "null"
              }
            ]
          },
          "methods": {
            "example": [
              "GET",
              "POST"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requestHeaders": {
            "items": {
              "$ref": "#/components/schemas/RuleWriteHeaderJson"
            },
            "type": "array"
          },
          "responseStatusCodes": {
            "description": "The backend response status code(s) that must trigger the rule",
            "example": [
              500,
              503
            ],
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "sampling": {
            "description": "The percentage of requests that must trigger the rule",
            "example": 47,
            "maximum": 100,
            "minimum": 0,
            "type": [
              "integer",
              "null"
            ]
          },
          "source": {
            "description": "The URL to redirect from.",
            "example": "/old-url",
            "type": "string"
          },
          "time": {
            "description": "Rules will only be triggered if the current time matches all of these conditions.",
            "example": [
              {
                "operator": "between",
                "value": [
                  "08:00",
                  "18:00"
                ]
              },
              {
                "operator": "notBetween",
                "value": [
                  "08:00",
                  "18:00"
                ]
              },
              {
                "operator": "after",
                "value": "08:00"
              },
              {
                "operator": "before",
                "value": "18:00"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteTimeTriggerJson"
            },
            "type": "array"
          }
        },
        "required": [
          "source"
        ],
        "type": "object"
      },
      "RuleWriteUnderscorize": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "underscorize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleWriteUnderscorizeJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "underscorize"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleWriteUppercase": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "uppercase"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleWriteUppercaseJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "type": {
            "enum": [
              "uppercase"
            ],
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "RuleWriteUuid": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformer"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "uuid"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "RuleWriteUuidJson": {
        "deprecated": false,
        "description": "",
        "properties": {
          "description": {
            "example": "My enum marker that only allow \"dog\" or \"cat\"",
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "example": "MyEnum",
            "type": "string"
          },
          "template": {
            "items": {
              "type": "string"
            },
            "type": [
              "array",
              "null"
            ]
          },
          "transformers": {
            "description": "Each `Transformer` must be an object with a `type` property, and some other properties according to its type:\n* `camelize`: No options\n * `dasherize`: No options\n* `lowercase` No options\n* `replace`:\n    * `something` (string, required)\n    * `with` (string, required)\n * `slice`:\n    * `from` (int, required)\n    * `to` (int, required)\n * `underscorize`: No options\n* `uppercase`: No options",
            "example": [
              {
                "something": "dog",
                "type": "replace",
                "with": "cat"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/RuleWriteAbstractTransformerJson"
            },
            "type": "array"
          },
          "type": {
            "enum": [
              "uuid"
            ],
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ],
        "type": "object"
      },
      "ValidationException": {
        "deprecated": false,
        "description": "Unprocessable entity",
        "properties": {
          "@context": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "additionalProperties": true,
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "type": "object"
              }
            ],
            "readOnly": true
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "readOnly": true,
            "type": "string"
          },
          "detail": {
            "readOnly": true,
            "type": "string"
          },
          "instance": {
            "readOnly": true,
            "type": [
              "string",
              "null"
            ]
          },
          "status": {
            "default": 422,
            "example": 422,
            "type": "integer"
          },
          "title": {
            "readOnly": true,
            "type": [
              "string",
              "null"
            ]
          },
          "type": {
            "readOnly": true,
            "type": "string"
          },
          "violations": {
            "items": {
              "properties": {
                "message": {
                  "description": "The message associated with the violation",
                  "type": "string"
                },
                "propertyPath": {
                  "description": "The property path of the violation",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "@context",
          "@id",
          "@type",
          "status",
          "violations",
          "detail",
          "description",
          "type",
          "title",
          "instance"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "JWT": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      },
      "Token": {
        "description": "You must use the API Token found under the \"API tokens\" screen of your organization\n[in the manager](https://redirection.io/manager).\n This token must be used in the `Authorization` header, as below:\n```\nAuthorization: Bearer TOKEN\n```",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "contact": {
      "email": "support@redirection.io",
      "name": "redirection.io",
      "url": "https://redirection.io/"
    },
    "description": "This is the documentation of the public API of [redirection.io](https://redirection.io).\n \nOur mission is to provide marketing, SEO and IT managers with the rights tools to manage the HTTP traffic of their website, get aware of browsing issues, and fix them right away with a friendly and easy to use solution.",
    "title": "redirection.io",
    "version": "2.0.0",
    "x-logo": {
      "altText": "redirection.io logo",
      "url": "https://redirection.io/media/logos/horizontal-logo-blue-text-black.svg"
    },
    "x-jentic-source-url": "https://api.redirection.io/docs.json"
  },
  "openapi": "3.1.0",
  "paths": {
    "/domains": {
      "get": {
        "deprecated": false,
        "description": "Retrieves the collection of the domains associated with a project.",
        "operationId": "getDomains",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "The id of the project.",
            "explode": false,
            "in": "query",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "The id of the last domain returned in the previous page. Used for pagination.",
            "explode": false,
            "in": "query",
            "name": "searchAfterId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "deprecated": false,
            "description": "The collection page number",
            "explode": false,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProjectDomainJson"
                  },
                  "type": "array"
                }
              },
              "application/ld+json": {
                "schema": {
                  "properties": {
                    "hydra:member": {
                      "items": {
                        "$ref": "#/components/schemas/ProjectDomain"
                      },
                      "type": "array"
                    },
                    "hydra:search": {
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "items": {
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "property": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "required": {
                                "type": "boolean"
                              },
                              "variable": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "hydra:totalItems": {
                      "minimum": 0,
                      "type": "integer"
                    },
                    "hydra:view": {
                      "example": {
                        "@id": "string",
                        "hydra:first": "string",
                        "hydra:last": "string",
                        "hydra:next": "string",
                        "hydra:previous": "string",
                        "type": "string"
                      },
                      "properties": {
                        "@id": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "hydra:last": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "hydra:next": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "hydra:previous": {
                          "format": "iri-reference",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "hydra:member"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "ProjectDomain collection"
          }
        },
        "summary": "Retrieves the collection of the domains.",
        "tags": [
          "ProjectDomain"
        ]
      },
      "post": {
        "deprecated": false,
        "description": "Use this endpoint to create a new domain in your project. Once the domain is created,\n[it can be found in the manager](https://redirection.io/manager).\n \n\ud83d\udca1 Read the [documentation about how to configure a domain on the redirection.io managed instances](https://redirection.io/documentation/managed-instances/add-a-domain-to-your-project).",
        "operationId": "createDomain",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDomainCreateJson"
              }
            },
            "application/ld+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectDomainCreate"
              }
            }
          },
          "description": "The new ProjectDomain resource",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDomainJson"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDomain"
                }
              }
            },
            "description": "ProjectDomain resource created",
            "links": {}
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid input",
            "links": {}
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationException"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationException"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationException"
                }
              }
            },
            "description": "An error occurred",
            "links": {}
          }
        },
        "summary": "Creates a new domain",
        "tags": [
          "ProjectDomain"
        ]
      }
    },
    "/domains/{id}": {
      "delete": {
        "deprecated": false,
        "description": "This endpoint allows to permanently delete a domain.",
        "operationId": "deleteDomain",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "ProjectDomain identifier",
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "ProjectDomain resource deleted"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden",
            "links": {}
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found",
            "links": {}
          }
        },
        "summary": "Permanently deletes a domain",
        "tags": [
          "ProjectDomain"
        ]
      },
      "get": {
        "deprecated": false,
        "description": "Use this endpoint to retrieve the details of a domain.",
        "operationId": "getDomain",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "ProjectDomain identifier",
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDomainJson"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDomain"
                }
              }
            },
            "description": "ProjectDomain resource"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found",
            "links": {}
          }
        },
        "summary": "Retrieves a ProjectDomain resource.",
        "tags": [
          "ProjectDomain"
        ]
      }
    },
    "/drafts": {
      "get": {
        "deprecated": false,
        "description": "This endpoint allows to retrieve the collection of draft rules of the project.\nDraft rules represent changes that have been saved in the project but not yet published.\nEach draft comes with a `status` property, which can be on of:\n * `add`: this is a new rule that is going to be added when publishing the ruleset\n * `update`: this is an already existing redirection rule that is going to be changed when publishing the ruleset\n * `delete`: this is an existing redirection rule that is going to be removed when publishing the ruleset",
        "operationId": "getDrafts",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "The id of the project.",
            "explode": false,
            "in": "query",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "The id of the last draft returned in the previous page. Used for pagination.",
            "explode": false,
            "in": "query",
            "name": "searchAfterId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "The name of one or more tags. Every Draft that is attached to at least one of those tags will be returned. Tags can also be passed as a comma separated list.",
            "explode": false,
            "in": "query",
            "name": "tags",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "The enabled status of the rule.",
            "explode": false,
            "in": "query",
            "name": "enabled",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DraftJson"
                  },
                  "type": "array"
                }
              },
              "application/ld+json": {
                "schema": {
                  "properties": {
                    "hydra:member": {
                      "items": {
                        "$ref": "#/components/schemas/Draft"
                      },
                      "type": "array"
                    },
                    "hydra:search": {
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "items": {
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "property": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "required": {
                                "type": "boolean"
                              },
                              "variable": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "hydra:totalItems": {
                      "minimum": 0,
                      "type": "integer"
                    },
                    "hydra:view": {
                      "example": {
                        "@id": "string",
                        "hydra:first": "string",
                        "hydra:last": "string",
                        "hydra:next": "string",
                        "hydra:previous": "string",
                        "type": "string"
                      },
                      "properties": {
                        "@id": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "hydra:last": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "hydra:next": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "hydra:previous": {
                          "format": "iri-reference",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "hydra:member"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Draft collection"
          }
        },
        "summary": "Retrieves the collection of Draft rules",
        "tags": [
          "Draft"
        ]
      }
    },
    "/drafts/{id}": {
      "delete": {
        "deprecated": false,
        "description": "This endpoint allows to delete a draft change:\n * if the draft has the status `add`, then it will be removed and the redirection rule will not be added when publishing the ruleset\n * if the draft has the status `update`, then it will be removed and the associated redirection rule will not be updated when publishing the ruleset\n * if the draft has the status `delete`, then it will be removed and the associated redirection rule will not be deleted when publishing the ruleset\n\n\ud83d\udca1 Unlike the redirection rules of your ruleset, draft changes can not be recovered once they have been deleted.",
        "operationId": "deleteDraft",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "Draft identifier",
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Draft resource deleted"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden",
            "links": {}
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found",
            "links": {}
          }
        },
        "summary": "Deletes a Draft",
        "tags": [
          "Draft"
        ]
      },
      "get": {
        "deprecated": false,
        "description": "Use this endpoint to retrieve the details of a draft rule.",
        "operationId": "getDraft",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "Draft identifier",
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DraftJson"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Draft"
                }
              }
            },
            "description": "Draft resource"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden",
            "links": {}
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found",
            "links": {}
          }
        },
        "summary": "Retrieves a Draft resource.",
        "tags": [
          "Draft"
        ]
      }
    },
    "/ips": {
      "get": {
        "deprecated": false,
        "description": "This endpoint allows to retrieve the collection of ips used by managed instances to forward requests.",
        "operationId": "getIps",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IpJson"
                  },
                  "type": "array"
                }
              },
              "application/ld+json": {
                "schema": {
                  "properties": {
                    "hydra:member": {
                      "items": {
                        "$ref": "#/components/schemas/Ip"
                      },
                      "type": "array"
                    },
                    "hydra:search": {
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "items": {
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "property": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "required": {
                                "type": "boolean"
                              },
                              "variable": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "hydra:totalItems": {
                      "minimum": 0,
                      "type": "integer"
                    },
                    "hydra:view": {
                      "example": {
                        "@id": "string",
                        "hydra:first": "string",
                        "hydra:last": "string",
                        "hydra:next": "string",
                        "hydra:previous": "string",
                        "type": "string"
                      },
                      "properties": {
                        "@id": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "hydra:last": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "hydra:next": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "hydra:previous": {
                          "format": "iri-reference",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "hydra:member"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Ip collection"
          }
        },
        "security": [],
        "summary": "Retrieves the collection of Ip resources.",
        "tags": [
          "Ip"
        ]
      }
    },
    "/organization": {
      "get": {
        "deprecated": false,
        "description": "This endpoint allows to retrieve the information of your redirection.io organization.",
        "operationId": "getOrganization",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationJson"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "Organization resource"
          }
        },
        "summary": "Retrieve the details of your organization",
        "tags": [
          "Organization"
        ]
      }
    },
    "/projects": {
      "get": {
        "deprecated": false,
        "description": "This endpoint allows to retrieve the collection of the projects in the organization associated to the provided API token.",
        "operationId": "getProjects",
        "parameters": [
          {
            "allowEmptyValue": true,
            "allowReserved": false,
            "deprecated": false,
            "description": "The collection page number",
            "explode": false,
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "type": "integer"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProjectJson"
                  },
                  "type": "array"
                }
              },
              "application/ld+json": {
                "schema": {
                  "properties": {
                    "hydra:member": {
                      "items": {
                        "$ref": "#/components/schemas/Project"
                      },
                      "type": "array"
                    },
                    "hydra:search": {
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "items": {
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "property": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "required": {
                                "type": "boolean"
                              },
                              "variable": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "hydra:totalItems": {
                      "minimum": 0,
                      "type": "integer"
                    },
                    "hydra:view": {
                      "example": {
                        "@id": "string",
                        "hydra:first": "string",
                        "hydra:last": "string",
                        "hydra:next": "string",
                        "hydra:previous": "string",
                        "type": "string"
                      },
                      "properties": {
                        "@id": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "hydra:last": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "hydra:next": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "hydra:previous": {
                          "format": "iri-reference",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "hydra:member"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Project collection"
          }
        },
        "summary": "Retrieves the collection of Project resources.",
        "tags": [
          "Project"
        ]
      },
      "post": {
        "deprecated": false,
        "description": "Use this endpoint to create a new project in your organization. The `metadata` attribute can be used to associate\nadditional information about this project.\n\nOnce the project is created, [it can be found in the manager](https://redirection.io/manager).",
        "operationId": "createProject",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreateJson"
              }
            },
            "application/ld+json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          },
          "description": "The new Project resource",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectJson"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Project resource created",
            "links": {}
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid input",
            "links": {}
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationException"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationException"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationException"
                }
              }
            },
            "description": "An error occurred",
            "links": {}
          }
        },
        "summary": "Creates a new project",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/{id}": {
      "delete": {
        "deprecated": false,
        "description": "This endpoint allows to permanently delete a project. When using this endpoint, the project and all of the associated data will be removed.\n \n\ud83d\uded1 **Deleting a project is permanent and cannot be undone.** All data, including the rules, the logs, etc., will be\nimmediately deleted and cannot be recovered afterwards. All the projects paid options will be lost and will not be refunded.",
        "operationId": "deleteProject",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "Project identifier",
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "Project resource deleted"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden",
            "links": {}
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found",
            "links": {}
          }
        },
        "summary": "Permanently deletes a project",
        "tags": [
          "Project"
        ]
      },
      "get": {
        "deprecated": false,
        "description": "Use this endpoint to retrieve the details of a project.",
        "operationId": "getProject",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "Project identifier",
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectJson"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "Project resource"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden",
            "links": {}
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found",
            "links": {}
          }
        },
        "summary": "Retrieves a Project resource.",
        "tags": [
          "Project"
        ]
      }
    },
    "/projects/{id}/publish": {
      "post": {
        "deprecated": false,
        "description": "Use this endpoint to publish all the draft rules (rules in status `new`, `update` and `delete`) of this project.\nPublishing rules allows to make them available to the redirection.io agent. Please note that draft changes can\nalso be used by \"[test mode instances](https://redirection.io/documentation/user-documentation/managing-instances#activate-the-test-mode)\" without publishing them.\n\nOnce the ruleset is published, [you can found the live rules in the manager](https://redirection.io/manager/).",
        "operationId": "publishProject",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "Resource identifier",
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {},
          "required": false
        },
        "responses": {
          "204": {
            "description": "Draft resources collection published"
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "summary": "Publishes the collection of Draft resources",
        "tags": [
          "Project"
        ]
      }
    },
    "/redirections": {
      "post": {
        "deprecated": false,
        "description": "Use this endpoint to create a new simple redirection rule (a Source URL, a target URL and a status code).\n\n\ud83d\udca1 Please note that using this endpoint will create a `Draft` change in your ruleset, with the `add` status.\nThe actual redirection rule will be used by your website only once you publish the ruleset.",
        "operationId": "createRedirection",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedirectionJson"
              }
            },
            "application/ld+json": {
              "schema": {
                "$ref": "#/components/schemas/Redirection"
              }
            }
          },
          "description": "The new Redirection resource",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DraftJson"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Draft"
                }
              }
            },
            "description": "Draft resource created (with the status `add`)"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid input",
            "links": {}
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationException"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationException"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationException"
                }
              }
            },
            "description": "An error occurred",
            "links": {}
          }
        },
        "summary": "Creates a new Redirection",
        "tags": [
          "Redirection"
        ]
      }
    },
    "/rules": {
      "get": {
        "deprecated": false,
        "description": "Retrieves the collection of currently published Rule resources.\n \n\ud83d\udca1 Please note that draft rules are **not** included in this list. If you have deleted a rule, it will still be listed here until you publish your ruleset.",
        "operationId": "getRules",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "The id of the project.",
            "explode": false,
            "in": "query",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "The id of the last rule returned in the previous page. Used for pagination.",
            "explode": false,
            "in": "query",
            "name": "searchAfterId",
            "required": false,
            "schema": {
              "type": "string"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "The name of one or more tags. Every Rule that is attached to at least one of those tags will be returned. Tags can also be passed as a comma separated list.",
            "explode": false,
            "in": "query",
            "name": "tags",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "The enabled status of the rule.",
            "explode": false,
            "in": "query",
            "name": "enabled",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RuleReadJson"
                  },
                  "type": "array"
                }
              },
              "application/ld+json": {
                "schema": {
                  "properties": {
                    "hydra:member": {
                      "items": {
                        "$ref": "#/components/schemas/RuleRead"
                      },
                      "type": "array"
                    },
                    "hydra:search": {
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "items": {
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "property": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "required": {
                                "type": "boolean"
                              },
                              "variable": {
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "type": "array"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "hydra:totalItems": {
                      "minimum": 0,
                      "type": "integer"
                    },
                    "hydra:view": {
                      "example": {
                        "@id": "string",
                        "hydra:first": "string",
                        "hydra:last": "string",
                        "hydra:next": "string",
                        "hydra:previous": "string",
                        "type": "string"
                      },
                      "properties": {
                        "@id": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "hydra:last": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "hydra:next": {
                          "format": "iri-reference",
                          "type": "string"
                        },
                        "hydra:previous": {
                          "format": "iri-reference",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "required": [
                    "hydra:member"
                  ],
                  "type": "object"
                }
              }
            },
            "description": "Rule collection"
          }
        },
        "summary": "Retrieves the collection of currently published Rule resources.",
        "tags": [
          "Rule"
        ]
      },
      "post": {
        "deprecated": false,
        "description": "Use this endpoint to create a new draft rule.\n\n\ud83d\udca1 Please note that the rule will actually be used by your website only once you publish the ruleset.",
        "operationId": "createRule",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RuleWriteJson"
              }
            },
            "application/ld+json": {
              "schema": {
                "$ref": "#/components/schemas/RuleWrite"
              }
            }
          },
          "description": "The new Rule resource",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DraftJson"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Draft"
                }
              }
            },
            "description": "Draft resource created (with the status `add`)"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid input",
            "links": {}
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationException"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationException"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationException"
                }
              }
            },
            "description": "An error occurred",
            "links": {}
          }
        },
        "summary": "Creates a new draft Rule",
        "tags": [
          "Rule"
        ]
      }
    },
    "/rules/{id}": {
      "delete": {
        "deprecated": false,
        "description": "This endpoint allows to delete a rule. It will create a `Draft` to effectively remove the rule during the next publication.\nPlease note that the rule will actually be removed only once you publish the ruleset.\n\n\ud83d\udca1 Even when deleted (so, after a publication), rules can be recovered using the project history.",
        "operationId": "deleteRule",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "Rule identifier",
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DraftJson"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Draft"
                }
              }
            },
            "description": "Draft rule resource updated (with the status `delete`)"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden",
            "links": {}
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found",
            "links": {}
          }
        },
        "summary": "Deletes a Rule",
        "tags": [
          "Rule"
        ]
      },
      "get": {
        "deprecated": false,
        "description": "Retrieves a Rule resource.",
        "operationId": "getRule",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "Rule identifier",
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleReadJson"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleRead"
                }
              }
            },
            "description": "Rule resource"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found",
            "links": {}
          }
        },
        "summary": "Retrieves a Rule resource",
        "tags": [
          "Rule"
        ]
      },
      "put": {
        "deprecated": false,
        "description": "Use this endpoint to update an existing rule.\n\n\ud83d\udca1 Please note that the rule will actually be updated on your website only once you publish the ruleset.",
        "operationId": "updateRule",
        "parameters": [
          {
            "allowEmptyValue": false,
            "allowReserved": false,
            "deprecated": false,
            "description": "Rule identifier",
            "explode": false,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RuleWriteJson"
              }
            },
            "application/ld+json": {
              "schema": {
                "$ref": "#/components/schemas/RuleWrite"
              }
            }
          },
          "description": "The updated Rule resource",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DraftJson"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Draft"
                }
              }
            },
            "description": "Draft rule resource updated (with the status `update`)"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid input",
            "links": {}
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden",
            "links": {}
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found",
            "links": {}
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationException"
                }
              },
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationException"
                }
              },
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationException"
                }
              }
            },
            "description": "An error occurred",
            "links": {}
          }
        },
        "summary": "Updates an existing Rule",
        "tags": [
          "Rule"
        ]
      }
    }
  },
  "security": [
    {
      "Token": []
    }
  ],
  "servers": [
    {
      "description": "The public redirection.io API endpoint",
      "url": "https://api.redirection.io/"
    }
  ],
  "tags": [
    {
      "description": "These endpoints allow to manage the rules of a project. It includes:\n * listing the currently published rules\n * creating a new draft rule (this will mark the rule to be created during the next publication)\n * updating a rule (this will mark the rule to be updated during the next publication)\n * deleting a rule (this will mark the rule to be deleted during the next publication)",
      "name": "Rule"
    },
    {
      "description": "This model can be used to create rules containing any trigger or action.\n <SchemaDefinition schemaRef=\"#/components/schemas/RuleWrite\" showReadOnly={true} showWriteOnly={true} />",
      "name": "RuleModel",
      "x-displayName": "The Rule Model"
    }
  ],
  "webhooks": {},
  "x-tagGroups": [
    {
      "name": "Endpoints",
      "tags": [
        "Organization",
        "Project",
        "ProjectDomain",
        "Redirection",
        "Rule",
        "Draft",
        "Ip"
      ]
    },
    {
      "name": "Models",
      "tags": [
        "RuleModel"
      ]
    }
  ]
}