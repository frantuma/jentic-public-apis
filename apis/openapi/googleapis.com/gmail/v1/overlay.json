{
  "overlay": "1.0.0",
  "info": {
    "title": "Gmail API Enhancement Overlay",
    "description": "Enhances the Gmail API OpenAPI specification with improved descriptions and summaries for better semantic searchability. It provides clear, concise explanations of key operations and their purposes, making it easier to find relevant API endpoints for common email management tasks.",
    "version": "1.0.0"
  },
  "actions": [
    {
      "target": "$.info",
      "update": {
        "description": "The Gmail API lets you view and manage Gmail mailbox data like threads, messages (emails), and labels."
      }
    },
    {
      "target": "$.paths['/gmail/v1/users/{userId}/messages'].get",
      "update": {
        "summary": "List emails",
        "description": "Lists the messages in the user's mailbox. Search, find, browse, query, list, or discover email messages with filtering options. Use for inbox management, email search, and message discovery."
      }
    },
    {
      "target": "$.paths['/gmail/v1/users/{userId}/messages/send'].post",
      "update": {
        "summary": "Send email",
        "description": "Sends the specified message to the recipients in the `To`, `Cc`, and `Bcc` headers. Send, transmit, deliver, dispatch, or forward an email to one or more recipients. For example usage, see [Sending email](https://developers.google.com/gmail/api/guides/sending)."
      }
    },
    {
      "target": "$.paths['/gmail/v1/users/{userId}/messages/{id}'].get",
      "update": {
        "summary": "Read email",
        "description": "Gets the specified message. Retrieve, read, open, fetch, view, or access a specific email from the user's mailbox. Returns message content, headers, and metadata."
      }
    },
    {
      "target": "$.paths['/gmail/v1/users/{userId}/messages/{id}'].delete",
      "update": {
        "summary": "Delete email permanently",
        "description": "Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer `messages.trash` instead. Permanently remove, purge, or erase an email with no recovery option."
      }
    },
    {
      "target": "$.paths['/gmail/v1/users/{userId}/messages/{id}/modify'].post",
      "update": {
        "summary": "Modify email labels",
        "description": "Modifies the labels on the specified message. Add, remove, update, change, or manage labels on an email. Use to organize email, mark as read/unread, star/unstar, or apply custom labels."
      }
    },
    {
      "target": "$.paths['/gmail/v1/users/{userId}/messages/{id}/trash'].post",
      "update": {
        "summary": "Trash email",
        "description": "Moves the specified message to the trash. Delete, remove, discard, or move an email to trash folder. Soft delete that can be undone with untrash operation."
      }
    },
    {
      "target": "$.paths['/gmail/v1/users/{userId}/messages/{id}/untrash'].post",
      "update": {
        "summary": "Restore email",
        "description": "Removes the specified message from the trash. Restore, recover, undelete, or retrieve an email from trash folder back to the inbox or original location."
      }
    },
    {
      "target": "$.components.schemas['MessageSendPayload','DraftPayload','DraftSendPayload']",
      "description": "Remove corrected request payload schemas from components.schemas to avoid merges if we modify them in future.",
      "remove": true
    },
    {
      "target": "$.components.schemas",
      "description": "Adds correct request payload schemas to components.schemas.",
      "update": {
        "MessageSendPayload": {
          "title": "Gmail Message request body payload",
          "description": "Request body payload for sending a new Gmail message.",
          "$comment": "Provide a base64url-encoded RFC 822 email in `raw`. Optionally include `threadId` to append to an existing thread.",
          "type": "object",
          "additionalProperties": false,
          "required": ["raw"],
          "properties": {
            "raw": {
              "type": "string",
              "description": "The value must be a base64url string (RFC 4648 §5), representing the entire RFC 822 email (headers + body). Use the URL-safe alphabet ('+'→'-', '/'→'_'), and omit any trailing padding '='.",
              "pattern": "^(?:[A-Za-z0-9_-]{4})*(?:[A-Za-z0-9_-]{2,3})?$",
              "contentEncoding": "base64",
              "contentMediaType": "message/rfc822",
              "writeOnly": true,
              "examples": [
                "RnJvbTogQWxpY2UgPGFsaWNlQGV4YW1wbGUuY29tPg0KVG86IEJvYiA8Ym9iQGV4YW1wbGUuY29tPg0KU3ViamVjdDogSGVsbG8NCg0KVGhpcyBpcyB0aGUgYm9keS4"
              ]
            },
            "threadId": {
              "type": "string",
              "description": "Optional thread to append to (RFC 2822 threading rules still apply).",
              "writeOnly": true,
              "examples": ["1876a9f4d2f3c1a2"]
            }
          },
          "examples": [
            {
              "raw": "RnJvbTogQWxpY2UgPGFsaWNlQGV4YW1wbGUuY29tPg0KVG86IEJvYiA8Ym9iQGV4YW1wbGUuY29tPg0KU3ViamVjdDogSGVsbG8NCg0KVGhpcyBpcyB0aGUgYm9keS4"
            },
            {
              "raw": "RnJvbTogQWxpY2UgPGFsaWNlQGV4YW1wbGUuY29tPg0KVG86IEJvYiA8Ym9iQGV4YW1wbGUuY29tPg0KU3ViamVjdDogUmVwbHk6IEhlbGxvDQoNCkZvbGxvdXAgbWVzc2FnZS4",
              "threadId": "1876a9f4d2f3c1a2"
            }
          ]
        },
        "DraftPayload": {
          "title": "Gmail Draft request body payload (CRUD)",
          "description": "Request body payload for creating or updating a Gmail draft.",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "message": {
              "$ref": "#/components/schemas/MessageSendPayload",
              "description": "If present, the draft content to store (base64url RFC 822 in `raw`)."
            }
          },
          "examples": [
            {},
            {
              "message": {
                "raw": "RnJvbTogQWxpY2UgPGFsaWNlQGV4YW1wbGUuY29tPg0KVG86IEJvYiA8Ym9iQGV4YW1wbGUuY29tPg0KU3ViamVjdDogRHJhZnQgVXBkYXRlDQoNCk5ldyBib2R5Lg"
              }
            }
          ]
        },
        "DraftSendPayload": {
          "title": "Gmail Draft request body payload (SEND)",
          "description": "Request body payload for sending a Gmail draft.",
          "type": "object",
          "additionalProperties": false,
          "required": ["id"],
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the draft to send.",
              "writeOnly": true,
              "examples": ["r7683935661136614131"]
            },
            "message": {
              "$ref": "#/components/schemas/MessageSendPayload",
              "writeOnly": true,
              "description": "If present, overrides the stored draft content (base64url RFC 822 in `raw`)."
            }
          },
          "examples": [
            { "id": "r7683935661136614131" },
            {
              "id": "r7683935661136614131",
              "message": {
                "raw": "RnJvbTogQWxpY2UgPGFsaWNlQGV4YW1wbGUuY29tPg0KVG86IEJvYiA8Ym9iQGV4YW1wbGUuY29tPg0KU3ViamVjdDogUmV2aXNlZCBEcmFmdA0KDQpVcGRhdGVkIGJvZHku",
                "threadId": "1876a9f4d2f3c1a2"
              }
            }
          ]
        }
      }
    },
    {
      "target": "$.paths['/gmail/v1/users/{userId}/messages/import'].post.requestBody.content['application/json'].schema",
      "update": {
        "$ref": "#/components/schemas/MessageSendPayload"
      }
    },
    {
      "target": "$.paths['/gmail/v1/users/{userId}/messages'].post.requestBody.content['application/json'].schema",
      "update": {
        "$ref": "#/components/schemas/MessageSendPayload"
      }
    },
    {
      "target": "$.paths['/gmail/v1/users/{userId}/messages/send'].post.requestBody.content['application/json'].schema",
      "update": {
        "$ref": "#/components/schemas/MessageSendPayload"
      }
    },
    {
      "target": "$.paths['/gmail/v1/users/{userId}/drafts/{id}'].put.requestBody.content['application/json'].schema",
      "update": {
        "$ref": "#/components/schemas/DraftPayload"
      }
    },
    {
      "target": "$.paths['/gmail/v1/users/{userId}/drafts'].post.requestBody.content['application/json'].schema",
      "update": {
        "$ref": "#/components/schemas/DraftPayload"
      }
    },
    {
      "target": "$.paths['/gmail/v1/users/{userId}/drafts/send'].post.requestBody.content['application/json'].schema",
      "update": {
        "$ref": "#/components/schemas/DraftSendPayload"
      }
    }
  ]
}