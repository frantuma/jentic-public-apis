# coding: utf-8

"""
    Lyft

    Drive your app to success with Lyft's API

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@lyft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.charge import Charge
from openapi_client.models.cost import Cost
from openapi_client.models.line_item import LineItem
from openapi_client.models.ride_profile_enum import RideProfileEnum
from typing import Optional, Set
from typing_extensions import Self

class RideReceipt(BaseModel):
    """
    Receipt information of a processed ride.
    """ # noqa: E501
    charges: Optional[List[Charge]] = Field(default=None, description="The break down of charge method")
    line_items: Optional[List[LineItem]] = Field(default=None, description="The break down of line items")
    price: Optional[Cost] = Field(default=None, description="The total price for the current ride")
    requested_at: Optional[datetime] = Field(default=None, description="The ride requested timestamp in date and time")
    ride_id: Optional[StrictStr] = Field(default=None, description="The unique ID of this ride")
    ride_profile: Optional[RideProfileEnum] = Field(default=None, description="Indicates whether the ride was requested from the business profile or personal profile of the user. ")
    __properties: ClassVar[List[str]] = ["charges", "line_items", "price", "requested_at", "ride_id", "ride_profile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RideReceipt from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item_charges in self.charges:
                if _item_charges:
                    _items.append(_item_charges.to_dict())
            _dict['charges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['line_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RideReceipt from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "charges": [Charge.from_dict(_item) for _item in obj["charges"]] if obj.get("charges") is not None else None,
            "line_items": [LineItem.from_dict(_item) for _item in obj["line_items"]] if obj.get("line_items") is not None else None,
            "price": Cost.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "requested_at": obj.get("requested_at"),
            "ride_id": obj.get("ride_id"),
            "ride_profile": obj.get("ride_profile")
        })
        return _obj


