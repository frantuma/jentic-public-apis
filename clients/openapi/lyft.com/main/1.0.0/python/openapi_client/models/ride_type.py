# coding: utf-8

"""
    Lyft

    Drive your app to success with Lyft's API

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@lyft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pricing_details import PricingDetails
from openapi_client.models.ride_type_enum import RideTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class RideType(BaseModel):
    """
    RideType
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="A human readable description of the ride type")
    image_url: Optional[StrictStr] = Field(default=None, description="The URL of an image representing this ride type")
    pricing_details: Optional[PricingDetails] = None
    ride_type: Optional[RideTypeEnum] = None
    scheduled_pricing_details: Optional[PricingDetails] = None
    seats: Optional[StrictInt] = Field(default=None, description="The maximum number of seats available for rides requested with this ride type")
    __properties: ClassVar[List[str]] = ["display_name", "image_url", "pricing_details", "ride_type", "scheduled_pricing_details", "seats"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RideType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pricing_details
        if self.pricing_details:
            _dict['pricing_details'] = self.pricing_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scheduled_pricing_details
        if self.scheduled_pricing_details:
            _dict['scheduled_pricing_details'] = self.scheduled_pricing_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RideType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "display_name": obj.get("display_name"),
            "image_url": obj.get("image_url"),
            "pricing_details": PricingDetails.from_dict(obj["pricing_details"]) if obj.get("pricing_details") is not None else None,
            "ride_type": obj.get("ride_type"),
            "scheduled_pricing_details": PricingDetails.from_dict(obj["scheduled_pricing_details"]) if obj.get("scheduled_pricing_details") is not None else None,
            "seats": obj.get("seats")
        })
        return _obj


