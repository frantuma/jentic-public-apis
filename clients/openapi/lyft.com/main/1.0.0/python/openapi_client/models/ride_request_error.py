# coding: utf-8

"""
    Lyft

    Drive your app to success with Lyft's API

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@lyft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.error_detail import ErrorDetail
from typing import Optional, Set
from typing_extensions import Self

class RideRequestError(BaseModel):
    """
    Details about why a request failed, such as missing or invalid parameters
    """ # noqa: E501
    cost_token: Optional[StrictStr] = Field(default=None, description="A token that confirms the user has accepted current Prime Time and/or fixed price charges")
    error: StrictStr = Field(description="A \"slug\" that serves as the error code (eg. \"bad_parameter\")")
    error_description: Optional[StrictStr] = Field(default=None, description="A user-friendly description of the error (appropriate to show to an end-user)")
    error_detail: Optional[List[ErrorDetail]] = None
    error_uri: Optional[StrictStr] = Field(default=None, description="When a user must go through another flow before requesting a ride, this URI specifies which flow to use (e.g. an account challenge flow in a web view)")
    primetime_confirmation_token: Optional[StrictStr] = Field(default=None, description="A token that confirms the user has accepted current Prime Time charges (Deprecated)")
    primetime_multiplier: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Current Prime Time multiplier (eg. if primetime_percentage is 100%, primetime_multiplier will be 2.0)")
    primetime_percentage: Optional[StrictStr] = Field(default=None, description="Current Prime Time percentage")
    token_duration: Optional[StrictStr] = Field(default=None, description="Validity of the token in seconds")
    __properties: ClassVar[List[str]] = ["cost_token", "error", "error_description", "error_detail", "error_uri", "primetime_confirmation_token", "primetime_multiplier", "primetime_percentage", "token_duration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RideRequestError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in error_detail (list)
        _items = []
        if self.error_detail:
            for _item_error_detail in self.error_detail:
                if _item_error_detail:
                    _items.append(_item_error_detail.to_dict())
            _dict['error_detail'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RideRequestError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cost_token": obj.get("cost_token"),
            "error": obj.get("error"),
            "error_description": obj.get("error_description"),
            "error_detail": [ErrorDetail.from_dict(_item) for _item in obj["error_detail"]] if obj.get("error_detail") is not None else None,
            "error_uri": obj.get("error_uri"),
            "primetime_confirmation_token": obj.get("primetime_confirmation_token"),
            "primetime_multiplier": obj.get("primetime_multiplier"),
            "primetime_percentage": obj.get("primetime_percentage"),
            "token_duration": obj.get("token_duration")
        })
        return _obj


