# coding: utf-8

"""
    Lyft

    Drive your app to success with Lyft's API

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@lyft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PricingDetails(BaseModel):
    """
    PricingDetails
    """ # noqa: E501
    base_charge: Optional[StrictInt] = Field(default=None, description="The base charge of the trip")
    cancel_penalty_amount: Optional[StrictInt] = Field(default=None, description="The charge amount if cancel penalty is involved")
    cost_minimum: Optional[StrictInt] = Field(default=None, description="The minimum charge for the trip")
    cost_per_mile: Optional[StrictInt] = Field(default=None, description="The cost per mile")
    cost_per_minute: Optional[StrictInt] = Field(default=None, description="The cost per minute")
    currency: Optional[StrictStr] = Field(default=None, description="The ISO 4217 currency code for the amount (e.g. USD)")
    trust_and_service: Optional[StrictInt] = Field(default=None, description="Service fee")
    __properties: ClassVar[List[str]] = ["base_charge", "cancel_penalty_amount", "cost_minimum", "cost_per_mile", "cost_per_minute", "currency", "trust_and_service"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricingDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricingDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base_charge": obj.get("base_charge"),
            "cancel_penalty_amount": obj.get("cancel_penalty_amount"),
            "cost_minimum": obj.get("cost_minimum"),
            "cost_per_mile": obj.get("cost_per_mile"),
            "cost_per_minute": obj.get("cost_per_minute"),
            "currency": obj.get("currency"),
            "trust_and_service": obj.get("trust_and_service")
        })
        return _obj


