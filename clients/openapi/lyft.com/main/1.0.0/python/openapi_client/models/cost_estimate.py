# coding: utf-8

"""
    Lyft

    Drive your app to success with Lyft's API

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@lyft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.ride_type_enum import RideTypeEnum
from typing import Optional, Set
from typing_extensions import Self

class CostEstimate(BaseModel):
    """
    A non-guaranteed estimate of price
    """ # noqa: E501
    cost_token: Optional[StrictStr] = Field(default=None, description="A token that confirms the user has accepted current Prime Time and/or fixed price charges. See 'Request a Lyft' for more details")
    currency: Optional[StrictStr] = Field(default=None, description="The ISO 4217 currency code for the amount (e.g. 'USD')")
    display_name: Optional[StrictStr] = Field(default=None, description="A human readable description of the ride type")
    estimated_cost_cents_max: Optional[StrictInt] = Field(default=None, description="Estimated upper bound for trip cost, in minor units (cents). Estimates are not guaranteed, and only provide a reasonable range based on current conditions. ")
    estimated_cost_cents_min: Optional[StrictInt] = Field(default=None, description="Estimated lower bound for trip cost, in minor units (cents). Estimates are not guaranteed, and only provide a reasonable range based on current conditions. ")
    estimated_distance_miles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Estimated distance for this trip ")
    estimated_duration_seconds: Optional[StrictInt] = Field(default=None, description="Estimated time to get from the start location to the end. ")
    is_valid_estimate: Optional[StrictBool] = Field(default=None, description="The validity of the cost estimate returned")
    primetime_confirmation_token: Optional[StrictStr] = Field(default=None, description="This token is needed when requesting rides. (Deprecated)")
    primetime_percentage: Optional[StrictStr] = Field(default=None, description="Current Prime Time Percentage. Prime Time adds a percentage to ride costs, prior to other applicable fees. When ride requests greatly outnumber available drivers, our system will automatically turn on Prime Time. If Prime Time is inactive, the value returned will be '0%'. Note: The returned estimate already has Prime Time factored in. The value is returned here for reference and to allow users to confirm/accept Prime Time prior to initiating a ride. ")
    ride_type: Optional[RideTypeEnum] = None
    __properties: ClassVar[List[str]] = ["cost_token", "currency", "display_name", "estimated_cost_cents_max", "estimated_cost_cents_min", "estimated_distance_miles", "estimated_duration_seconds", "is_valid_estimate", "primetime_confirmation_token", "primetime_percentage", "ride_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CostEstimate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CostEstimate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cost_token": obj.get("cost_token"),
            "currency": obj.get("currency"),
            "display_name": obj.get("display_name"),
            "estimated_cost_cents_max": obj.get("estimated_cost_cents_max"),
            "estimated_cost_cents_min": obj.get("estimated_cost_cents_min"),
            "estimated_distance_miles": obj.get("estimated_distance_miles"),
            "estimated_duration_seconds": obj.get("estimated_duration_seconds"),
            "is_valid_estimate": obj.get("is_valid_estimate"),
            "primetime_confirmation_token": obj.get("primetime_confirmation_token"),
            "primetime_percentage": obj.get("primetime_percentage"),
            "ride_type": obj.get("ride_type")
        })
        return _obj


