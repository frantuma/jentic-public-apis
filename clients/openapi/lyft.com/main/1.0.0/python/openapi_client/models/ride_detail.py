# coding: utf-8

"""
    Lyft

    Drive your app to success with Lyft's API

    The version of the OpenAPI document: 1.0.0
    Contact: api-support@lyft.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.cancellation_cost import CancellationCost
from openapi_client.models.cost import Cost
from openapi_client.models.current_ride_location import CurrentRideLocation
from openapi_client.models.driver_detail import DriverDetail
from openapi_client.models.line_item import LineItem
from openapi_client.models.passenger_detail import PassengerDetail
from openapi_client.models.pickup_dropoff_location import PickupDropoffLocation
from openapi_client.models.ride_location import RideLocation
from openapi_client.models.ride_profile_enum import RideProfileEnum
from openapi_client.models.ride_status_enum import RideStatusEnum
from openapi_client.models.ride_type_enum_with_other import RideTypeEnumWithOther
from openapi_client.models.vehicle_detail import VehicleDetail
from typing import Optional, Set
from typing_extensions import Self

class RideDetail(BaseModel):
    """
    Detail information about a ride
    """ # noqa: E501
    beacon_color: Optional[StrictStr] = Field(default=None, description="Hex color code of the driver AMP device.")
    can_cancel: Optional[List[StrictStr]] = None
    canceled_by: Optional[StrictStr] = Field(default=None, description="The role of user who canceled the ride (if applicable)")
    cancellation_price: Optional[CancellationCost] = Field(default=None, description="The cost of cancellation if there would be a penalty")
    destination: Optional[RideLocation] = Field(default=None, description="The *requested* location for passenger drop off")
    distance_miles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The distance, in miles, that this ride traveled. This field is only present after drop-off")
    driver: Optional[DriverDetail] = None
    dropoff: Optional[PickupDropoffLocation] = Field(default=None, description="The *actual* location of passenger drop off")
    duration_seconds: Optional[StrictInt] = Field(default=None, description="Duration of the ride in seconds from pickup to drop-off. This field is only present after drop-off.")
    feedback: Optional[StrictStr] = Field(default=None, description="The written feedback the user left for this ride")
    generated_at: Optional[datetime] = Field(default=None, description="The request timestamp in date and time")
    line_items: Optional[List[LineItem]] = Field(default=None, description="The break down of cost")
    location: Optional[CurrentRideLocation] = Field(default=None, description="The *current* location info of the ride")
    origin: Optional[RideLocation] = Field(default=None, description="The *requested* location for passenger pickup")
    passenger: Optional[PassengerDetail] = None
    pickup: Optional[PickupDropoffLocation] = Field(default=None, description="The *actual* location of passenger pickup")
    price: Optional[Cost] = Field(default=None, description="The total price for the current ride")
    pricing_details_url: Optional[StrictStr] = Field(default=None, description="The web view showing the pricing structure for the geographic area where the ride was taken ")
    primetime_percentage: Optional[StrictStr] = Field(default=None, description="The Prime Time percentage applied to the base price")
    rating: Optional[StrictInt] = Field(default=None, description="The rating the user left for this ride, from 1 to 5")
    requested_at: Optional[datetime] = Field(default=None, description="The ride requested timestamp in date and time")
    ride_id: Optional[StrictStr] = Field(default=None, description="The unique ID of this ride")
    ride_profile: Optional[RideProfileEnum] = Field(default=None, description="Indicates whether the ride was requested from the business profile or personal profile of the user. ")
    ride_type: Optional[RideTypeEnumWithOther] = None
    route_url: Optional[StrictStr] = Field(default=None, description="The web view showing the passenger, driver, and route for this ride. This field will only be present for rides created through this API, or that have been shared through the \"Share my Route\" feature ")
    status: Optional[RideStatusEnum] = None
    vehicle: Optional[VehicleDetail] = None
    __properties: ClassVar[List[str]] = ["beacon_color", "can_cancel", "canceled_by", "cancellation_price", "destination", "distance_miles", "driver", "dropoff", "duration_seconds", "feedback", "generated_at", "line_items", "location", "origin", "passenger", "pickup", "price", "pricing_details_url", "primetime_percentage", "rating", "requested_at", "ride_id", "ride_profile", "ride_type", "route_url", "status", "vehicle"]

    @field_validator('can_cancel')
    def can_cancel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['driver', 'passenger', 'dispatcher']):
                raise ValueError("each list item must be one of ('driver', 'passenger', 'dispatcher')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RideDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cancellation_price
        if self.cancellation_price:
            _dict['cancellation_price'] = self.cancellation_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of driver
        if self.driver:
            _dict['driver'] = self.driver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dropoff
        if self.dropoff:
            _dict['dropoff'] = self.dropoff.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['line_items'] = _items
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of origin
        if self.origin:
            _dict['origin'] = self.origin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of passenger
        if self.passenger:
            _dict['passenger'] = self.passenger.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pickup
        if self.pickup:
            _dict['pickup'] = self.pickup.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vehicle
        if self.vehicle:
            _dict['vehicle'] = self.vehicle.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RideDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "beacon_color": obj.get("beacon_color"),
            "can_cancel": obj.get("can_cancel"),
            "canceled_by": obj.get("canceled_by"),
            "cancellation_price": CancellationCost.from_dict(obj["cancellation_price"]) if obj.get("cancellation_price") is not None else None,
            "destination": RideLocation.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "distance_miles": obj.get("distance_miles"),
            "driver": DriverDetail.from_dict(obj["driver"]) if obj.get("driver") is not None else None,
            "dropoff": PickupDropoffLocation.from_dict(obj["dropoff"]) if obj.get("dropoff") is not None else None,
            "duration_seconds": obj.get("duration_seconds"),
            "feedback": obj.get("feedback"),
            "generated_at": obj.get("generated_at"),
            "line_items": [LineItem.from_dict(_item) for _item in obj["line_items"]] if obj.get("line_items") is not None else None,
            "location": CurrentRideLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "origin": RideLocation.from_dict(obj["origin"]) if obj.get("origin") is not None else None,
            "passenger": PassengerDetail.from_dict(obj["passenger"]) if obj.get("passenger") is not None else None,
            "pickup": PickupDropoffLocation.from_dict(obj["pickup"]) if obj.get("pickup") is not None else None,
            "price": Cost.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "pricing_details_url": obj.get("pricing_details_url"),
            "primetime_percentage": obj.get("primetime_percentage"),
            "rating": obj.get("rating"),
            "requested_at": obj.get("requested_at"),
            "ride_id": obj.get("ride_id"),
            "ride_profile": obj.get("ride_profile"),
            "ride_type": obj.get("ride_type"),
            "route_url": obj.get("route_url"),
            "status": obj.get("status"),
            "vehicle": VehicleDetail.from_dict(obj["vehicle"]) if obj.get("vehicle") is not None else None
        })
        return _obj


