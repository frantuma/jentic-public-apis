/*
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VehicleDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-17T15:50:21.833925591+02:00[Europe/Rome]", comments = "Generator version: 7.14.0")
public class VehicleDetail {
  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  @javax.annotation.Nonnull
  private String color;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  @javax.annotation.Nonnull
  private String imageUrl;

  public static final String SERIALIZED_NAME_LICENSE_PLATE = "license_plate";
  @SerializedName(SERIALIZED_NAME_LICENSE_PLATE)
  @javax.annotation.Nonnull
  private String licensePlate;

  public static final String SERIALIZED_NAME_LICENSE_PLATE_STATE = "license_plate_state";
  @SerializedName(SERIALIZED_NAME_LICENSE_PLATE_STATE)
  @javax.annotation.Nonnull
  private String licensePlateState;

  public static final String SERIALIZED_NAME_MAKE = "make";
  @SerializedName(SERIALIZED_NAME_MAKE)
  @javax.annotation.Nonnull
  private String make;

  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  @javax.annotation.Nonnull
  private String model;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  @javax.annotation.Nonnull
  private Integer year;

  public VehicleDetail() {
  }

  public VehicleDetail color(@javax.annotation.Nonnull String color) {
    this.color = color;
    return this;
  }

  /**
   * The vehicle&#39;s color
   * @return color
   */
  @javax.annotation.Nonnull
  public String getColor() {
    return color;
  }

  public void setColor(@javax.annotation.Nonnull String color) {
    this.color = color;
  }


  public VehicleDetail imageUrl(@javax.annotation.Nonnull String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * The vehicle&#39;s image url
   * @return imageUrl
   */
  @javax.annotation.Nonnull
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(@javax.annotation.Nonnull String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public VehicleDetail licensePlate(@javax.annotation.Nonnull String licensePlate) {
    this.licensePlate = licensePlate;
    return this;
  }

  /**
   * The vehicle&#39;s license plate
   * @return licensePlate
   */
  @javax.annotation.Nonnull
  public String getLicensePlate() {
    return licensePlate;
  }

  public void setLicensePlate(@javax.annotation.Nonnull String licensePlate) {
    this.licensePlate = licensePlate;
  }


  public VehicleDetail licensePlateState(@javax.annotation.Nonnull String licensePlateState) {
    this.licensePlateState = licensePlateState;
    return this;
  }

  /**
   * The vehicle&#39;s license plate state
   * @return licensePlateState
   */
  @javax.annotation.Nonnull
  public String getLicensePlateState() {
    return licensePlateState;
  }

  public void setLicensePlateState(@javax.annotation.Nonnull String licensePlateState) {
    this.licensePlateState = licensePlateState;
  }


  public VehicleDetail make(@javax.annotation.Nonnull String make) {
    this.make = make;
    return this;
  }

  /**
   * The vehicle&#39;s maker
   * @return make
   */
  @javax.annotation.Nonnull
  public String getMake() {
    return make;
  }

  public void setMake(@javax.annotation.Nonnull String make) {
    this.make = make;
  }


  public VehicleDetail model(@javax.annotation.Nonnull String model) {
    this.model = model;
    return this;
  }

  /**
   * The vehicle&#39;s model
   * @return model
   */
  @javax.annotation.Nonnull
  public String getModel() {
    return model;
  }

  public void setModel(@javax.annotation.Nonnull String model) {
    this.model = model;
  }


  public VehicleDetail year(@javax.annotation.Nonnull Integer year) {
    this.year = year;
    return this;
  }

  /**
   * The vehicle&#39;s model year
   * @return year
   */
  @javax.annotation.Nonnull
  public Integer getYear() {
    return year;
  }

  public void setYear(@javax.annotation.Nonnull Integer year) {
    this.year = year;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VehicleDetail vehicleDetail = (VehicleDetail) o;
    return Objects.equals(this.color, vehicleDetail.color) &&
        Objects.equals(this.imageUrl, vehicleDetail.imageUrl) &&
        Objects.equals(this.licensePlate, vehicleDetail.licensePlate) &&
        Objects.equals(this.licensePlateState, vehicleDetail.licensePlateState) &&
        Objects.equals(this.make, vehicleDetail.make) &&
        Objects.equals(this.model, vehicleDetail.model) &&
        Objects.equals(this.year, vehicleDetail.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, imageUrl, licensePlate, licensePlateState, make, model, year);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VehicleDetail {\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    licensePlate: ").append(toIndentedString(licensePlate)).append("\n");
    sb.append("    licensePlateState: ").append(toIndentedString(licensePlateState)).append("\n");
    sb.append("    make: ").append(toIndentedString(make)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("color", "image_url", "license_plate", "license_plate_state", "make", "model", "year"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("color", "image_url", "license_plate", "license_plate_state", "make", "model", "year"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VehicleDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VehicleDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VehicleDetail is not found in the empty JSON string", VehicleDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VehicleDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VehicleDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VehicleDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if (!jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if (!jsonObj.get("license_plate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_plate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_plate").toString()));
      }
      if (!jsonObj.get("license_plate_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_plate_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_plate_state").toString()));
      }
      if (!jsonObj.get("make").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `make` to be a primitive type in the JSON string but got `%s`", jsonObj.get("make").toString()));
      }
      if (!jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VehicleDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VehicleDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VehicleDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VehicleDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<VehicleDetail>() {
           @Override
           public void write(JsonWriter out, VehicleDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VehicleDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VehicleDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VehicleDetail
   * @throws IOException if the JSON string is invalid with respect to VehicleDetail
   */
  public static VehicleDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VehicleDetail.class);
  }

  /**
   * Convert an instance of VehicleDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

