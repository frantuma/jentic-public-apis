/*
 * Lyft
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.SandboxDriverAvailability;
import org.openapitools.client.model.SandboxPrimetime;
import org.openapitools.client.model.SandboxRideStatus;
import org.openapitools.client.model.SandboxRideType;
import org.openapitools.client.model.SandboxRideUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SandboxApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SandboxApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SandboxApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for setPrimeTime
     * @param sandboxPrimetime Prime Time to be preset in the region surrounding the lat, lng (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully applied Prime Time in sandbox </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPrimeTimeCall(@javax.annotation.Nonnull SandboxPrimetime sandboxPrimetime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxPrimetime;

        // create path and map variables
        String localVarPath = "/sandbox/primetime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "User_Authentication", "Client_Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPrimeTimeValidateBeforeCall(@javax.annotation.Nonnull SandboxPrimetime sandboxPrimetime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxPrimetime' is set
        if (sandboxPrimetime == null) {
            throw new ApiException("Missing the required parameter 'sandboxPrimetime' when calling setPrimeTime(Async)");
        }

        return setPrimeTimeCall(sandboxPrimetime, _callback);

    }

    /**
     * Preset Prime Time percentage
     * Preset a Prime Time percentage in the region surrounding the specified location. This Prime Time percentage will be applied when requesting cost, or when requesting a ride in sandbox mode. 
     * @param sandboxPrimetime Prime Time to be preset in the region surrounding the lat, lng (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully applied Prime Time in sandbox </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public void setPrimeTime(@javax.annotation.Nonnull SandboxPrimetime sandboxPrimetime) throws ApiException {
        setPrimeTimeWithHttpInfo(sandboxPrimetime);
    }

    /**
     * Preset Prime Time percentage
     * Preset a Prime Time percentage in the region surrounding the specified location. This Prime Time percentage will be applied when requesting cost, or when requesting a ride in sandbox mode. 
     * @param sandboxPrimetime Prime Time to be preset in the region surrounding the lat, lng (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully applied Prime Time in sandbox </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setPrimeTimeWithHttpInfo(@javax.annotation.Nonnull SandboxPrimetime sandboxPrimetime) throws ApiException {
        okhttp3.Call localVarCall = setPrimeTimeValidateBeforeCall(sandboxPrimetime, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Preset Prime Time percentage (asynchronously)
     * Preset a Prime Time percentage in the region surrounding the specified location. This Prime Time percentage will be applied when requesting cost, or when requesting a ride in sandbox mode. 
     * @param sandboxPrimetime Prime Time to be preset in the region surrounding the lat, lng (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully applied Prime Time in sandbox </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setPrimeTimeAsync(@javax.annotation.Nonnull SandboxPrimetime sandboxPrimetime, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPrimeTimeValidateBeforeCall(sandboxPrimetime, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setRideStatus
     * @param id The ID of the ride (required)
     * @param sandboxRideStatus status to propagate the ride into (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with the Ride ID and the new status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error occurred </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRideStatusCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull SandboxRideStatus sandboxRideStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxRideStatus;

        // create path and map variables
        String localVarPath = "/sandbox/rides/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "User_Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setRideStatusValidateBeforeCall(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull SandboxRideStatus sandboxRideStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setRideStatus(Async)");
        }

        // verify the required parameter 'sandboxRideStatus' is set
        if (sandboxRideStatus == null) {
            throw new ApiException("Missing the required parameter 'sandboxRideStatus' when calling setRideStatus(Async)");
        }

        return setRideStatusCall(id, sandboxRideStatus, _callback);

    }

    /**
     * Propagate ride through ride status
     * Propagate a sandbox-ride through various ride status 
     * @param id The ID of the ride (required)
     * @param sandboxRideStatus status to propagate the ride into (required)
     * @return SandboxRideUpdate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with the Ride ID and the new status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error occurred </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request </td><td>  -  </td></tr>
     </table>
     */
    public SandboxRideUpdate setRideStatus(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull SandboxRideStatus sandboxRideStatus) throws ApiException {
        ApiResponse<SandboxRideUpdate> localVarResp = setRideStatusWithHttpInfo(id, sandboxRideStatus);
        return localVarResp.getData();
    }

    /**
     * Propagate ride through ride status
     * Propagate a sandbox-ride through various ride status 
     * @param id The ID of the ride (required)
     * @param sandboxRideStatus status to propagate the ride into (required)
     * @return ApiResponse&lt;SandboxRideUpdate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with the Ride ID and the new status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error occurred </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SandboxRideUpdate> setRideStatusWithHttpInfo(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull SandboxRideStatus sandboxRideStatus) throws ApiException {
        okhttp3.Call localVarCall = setRideStatusValidateBeforeCall(id, sandboxRideStatus, null);
        Type localVarReturnType = new TypeToken<SandboxRideUpdate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Propagate ride through ride status (asynchronously)
     * Propagate a sandbox-ride through various ride status 
     * @param id The ID of the ride (required)
     * @param sandboxRideStatus status to propagate the ride into (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object with the Ride ID and the new status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error occurred </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> User or client does not have permission to complete this request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRideStatusAsync(@javax.annotation.Nonnull String id, @javax.annotation.Nonnull SandboxRideStatus sandboxRideStatus, final ApiCallback<SandboxRideUpdate> _callback) throws ApiException {

        okhttp3.Call localVarCall = setRideStatusValidateBeforeCall(id, sandboxRideStatus, _callback);
        Type localVarReturnType = new TypeToken<SandboxRideUpdate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setRideTypeAvailability
     * @param rideType  (required)
     * @param sandboxDriverAvailability Driver availability to be preset in the region surrounding the lat, lng (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully set driver availability in sandbox </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error occurred </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ride_type provided in the path is not supported in the current area </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRideTypeAvailabilityCall(@javax.annotation.Nonnull String rideType, @javax.annotation.Nonnull SandboxDriverAvailability sandboxDriverAvailability, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxDriverAvailability;

        // create path and map variables
        String localVarPath = "/sandbox/ridetypes/{ride_type}"
            .replace("{" + "ride_type" + "}", localVarApiClient.escapeString(rideType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "User_Authentication", "Client_Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setRideTypeAvailabilityValidateBeforeCall(@javax.annotation.Nonnull String rideType, @javax.annotation.Nonnull SandboxDriverAvailability sandboxDriverAvailability, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rideType' is set
        if (rideType == null) {
            throw new ApiException("Missing the required parameter 'rideType' when calling setRideTypeAvailability(Async)");
        }

        // verify the required parameter 'sandboxDriverAvailability' is set
        if (sandboxDriverAvailability == null) {
            throw new ApiException("Missing the required parameter 'sandboxDriverAvailability' when calling setRideTypeAvailability(Async)");
        }

        return setRideTypeAvailabilityCall(rideType, sandboxDriverAvailability, _callback);

    }

    /**
     * Driver availability for processing ride request
     * Set driver availability for the provided ride_type in the city/region surrounding the specified location 
     * @param rideType  (required)
     * @param sandboxDriverAvailability Driver availability to be preset in the region surrounding the lat, lng (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully set driver availability in sandbox </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error occurred </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ride_type provided in the path is not supported in the current area </td><td>  -  </td></tr>
     </table>
     */
    public void setRideTypeAvailability(@javax.annotation.Nonnull String rideType, @javax.annotation.Nonnull SandboxDriverAvailability sandboxDriverAvailability) throws ApiException {
        setRideTypeAvailabilityWithHttpInfo(rideType, sandboxDriverAvailability);
    }

    /**
     * Driver availability for processing ride request
     * Set driver availability for the provided ride_type in the city/region surrounding the specified location 
     * @param rideType  (required)
     * @param sandboxDriverAvailability Driver availability to be preset in the region surrounding the lat, lng (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully set driver availability in sandbox </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error occurred </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ride_type provided in the path is not supported in the current area </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setRideTypeAvailabilityWithHttpInfo(@javax.annotation.Nonnull String rideType, @javax.annotation.Nonnull SandboxDriverAvailability sandboxDriverAvailability) throws ApiException {
        okhttp3.Call localVarCall = setRideTypeAvailabilityValidateBeforeCall(rideType, sandboxDriverAvailability, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Driver availability for processing ride request (asynchronously)
     * Set driver availability for the provided ride_type in the city/region surrounding the specified location 
     * @param rideType  (required)
     * @param sandboxDriverAvailability Driver availability to be preset in the region surrounding the lat, lng (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully set driver availability in sandbox </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error occurred </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ride_type provided in the path is not supported in the current area </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRideTypeAvailabilityAsync(@javax.annotation.Nonnull String rideType, @javax.annotation.Nonnull SandboxDriverAvailability sandboxDriverAvailability, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setRideTypeAvailabilityValidateBeforeCall(rideType, sandboxDriverAvailability, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setRideTypes
     * @param sandboxRideType Ridetypes to be preset in the region surrounding the lat, lng (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object listing the ridetypes at a given location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRideTypesCall(@javax.annotation.Nonnull SandboxRideType sandboxRideType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sandboxRideType;

        // create path and map variables
        String localVarPath = "/sandbox/ridetypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "User_Authentication", "Client_Authentication" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setRideTypesValidateBeforeCall(@javax.annotation.Nonnull SandboxRideType sandboxRideType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sandboxRideType' is set
        if (sandboxRideType == null) {
            throw new ApiException("Missing the required parameter 'sandboxRideType' when calling setRideTypes(Async)");
        }

        return setRideTypesCall(sandboxRideType, _callback);

    }

    /**
     * Preset types of rides for sandbox
     * The sandbox-ridetypes endpoint allows you to preset the ridetypes in the region surrounding the specified latitude and longitude to allow testing different scenarios 
     * @param sandboxRideType Ridetypes to be preset in the region surrounding the lat, lng (required)
     * @return SandboxRideType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object listing the ridetypes at a given location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public SandboxRideType setRideTypes(@javax.annotation.Nonnull SandboxRideType sandboxRideType) throws ApiException {
        ApiResponse<SandboxRideType> localVarResp = setRideTypesWithHttpInfo(sandboxRideType);
        return localVarResp.getData();
    }

    /**
     * Preset types of rides for sandbox
     * The sandbox-ridetypes endpoint allows you to preset the ridetypes in the region surrounding the specified latitude and longitude to allow testing different scenarios 
     * @param sandboxRideType Ridetypes to be preset in the region surrounding the lat, lng (required)
     * @return ApiResponse&lt;SandboxRideType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object listing the ridetypes at a given location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SandboxRideType> setRideTypesWithHttpInfo(@javax.annotation.Nonnull SandboxRideType sandboxRideType) throws ApiException {
        okhttp3.Call localVarCall = setRideTypesValidateBeforeCall(sandboxRideType, null);
        Type localVarReturnType = new TypeToken<SandboxRideType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Preset types of rides for sandbox (asynchronously)
     * The sandbox-ridetypes endpoint allows you to preset the ridetypes in the region surrounding the specified latitude and longitude to allow testing different scenarios 
     * @param sandboxRideType Ridetypes to be preset in the region surrounding the lat, lng (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An object listing the ridetypes at a given location </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation error occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRideTypesAsync(@javax.annotation.Nonnull SandboxRideType sandboxRideType, final ApiCallback<SandboxRideType> _callback) throws ApiException {

        okhttp3.Call localVarCall = setRideTypesValidateBeforeCall(sandboxRideType, _callback);
        Type localVarReturnType = new TypeToken<SandboxRideType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
